【AWS】4．データベース



/****************** 4-1 Amazon RDS ********************/
⚫️Amazon RDS（Relational Database Service）
：AWSが提供するフルマネージド型のリレーショナルデータベースサービス。OSやDBソフトのインストール、パッチ、バックアップなどの運用作業を自動化。高可用・スケーラブル。
🔧 基本機能と設定
⚫️対応エンジン
：以下のような主要なデータベースエンジンを選べる：

MySQL

PostgreSQL

MariaDB

Oracle

SQL Server

Amazon Aurora（後述）

⚫️DBインスタンス
：RDSで起動される1つのデータベースサーバーのこと。インスタンスタイプ（CPU/メモリ）を選んで構築する。

⚫️マルチAZ配置（Multi-AZ）
：別のAZ（アベイラビリティゾーン）に同期レプリカを作成して、自動フェイルオーバーを可能にする構成。可用性が高まる。

⚫️リードレプリカ（Read Replica）
：読み込み専用のレプリカ。読み込み負荷の分散や災害対策用に使用。非同期レプリケーション。

⚫️ストレージタイプ
：RDSでは以下の3タイプのストレージが選択可能。

タイプ	特徴
gp2 / gp3（汎用SSD）	通常用途。バランス型。gp3は性能設定可能。
io1（プロビジョンドIOPS）	高IOPSが必要なDB向け。
magnetic（旧型）	低コストだが推奨されない。
🔐 セキュリティと接続
⚫️セキュリティグループ
：RDSインスタンスに対するアクセス制御のファイアウォール。インバウンドルールでIPやポートを許可。

⚫️IAM認証
：IAMユーザーやロールによるデータベースログインの認証が可能（MySQL、PostgreSQLなど一部対応）。

⚫️暗号化
：保存データ（at rest）と送信データ（in transit）の両方を暗号化可能。KMSを使って鍵を管理。

⚫️VPC内配置
：RDSはVPC内で起動され、プライベートな通信経路を使用できる。

📦 バックアップ・復旧
⚫️自動バックアップ
：最大35日間保持できる自動バックアップ機能。PITR（ポイントインタイムリカバリ）にも対応。

⚫️手動スナップショット
：任意のタイミングで取得できるバックアップのスナップショット。長期保存や他アカウント共有にも使える。

⚫️リストア
：スナップショットやポイントインタイムから新しいインスタンスとして復元可能。上書きされることはない。

☁️ その他の機能
⚫️パラメータグループ
：DBエンジンの設定値（バッファサイズやタイムアウトなど）をまとめたグループ。変更には再起動が必要なものもある。

⚫️イベント通知
：バックアップ完了、フェイルオーバー発生、スナップショット作成などの重要イベントをSNS通知で受け取れる。

⚫️インスタンスクラス
：db.t3.micro, db.m5.large など。CPU・メモリ性能の指標となる。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
マルチAZ配置は可用性のため、リードレプリカは読み込み性能向上や災害対策のため

PITRを使えば、任意の過去の時点にデータを戻せる

スナップショットからの復元は、新しいインスタンスとして作成される

VPC・セキュリティグループ・暗号化設定を最初に適切に設計しておくことが重要

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
リードレプリカも自動フェイルオーバーできる	❌ できない（プライマリ昇格は手動または設定要）
バックアップは別途構成が必要	❌ 自動バックアップはデフォルトで有効（保持期間の指定は必要）
マルチAZ構成で負荷分散もされる	❌ マルチAZは可用性確保のみで、読み込み分散にはリードレプリカが必要

----------------------------------------------------------------------------
       [App]            [App]
         │                 │
         ▼                 ▼
 ┌──────────────┐
 │  Amazon RDS（プライマリ） │ ← 書き込み・読み込み
 └──────────────┘
         │
     同期レプリケーション
         ▼
 ┌──────────────┐
 │ RDS（スタンバイ：マルチAZ）│ ← フェイルオーバー時に昇格
 └──────────────┘

※別にリードレプリカを作成すれば読み込み分散も可能



/****************** 4-1-1 Amazon Aurora ********************/
 Amazon Aurora 周辺の主要用語と解説
⚫️Amazon Aurora
：Amazonが独自に開発した、MySQL / PostgreSQL 互換の高速・高可用なリレーショナルデータベースエンジン。RDSファミリーの一部だが、通常のRDSより高性能かつ高機能。

⚙️ 基本構成と特徴
⚫️Aurora クラスター（DB Cluster）
：Auroraの基本単位の構成。1つのクラスタにプライマリインスタンス（書き込み）とリードレプリカ（読み取り専用）を含む。

⚫️Aurora インスタンス
：Auroraクラスター内で実際に稼働するDBインスタンス。

プライマリインスタンス（1台）：読み書き両対応

リードレプリカ（最大15台）：読み取り専用でスケールアウト可能

⚫️Aurora ストレージ
：Auroraはクラスタ単位でストレージを共有し、自動でスケーリング（最大128TiB）される。インスタンスとは分離されており、冗長性も高い。

⚫️Aurora Serverless v2
：Auroraをサーバーレスで実行できるモード。トラフィック量に応じて自動的にスケールイン／スケールアウト。スモールスタートやバースト処理に最適。

📈 パフォーマンス・スケーラビリティ
⚫️高速ストレージアクセス
：データは6つのコピーを3つのAZに分散保存され、同期・自己修復が高速。
→ 通常のRDSに比べて2〜5倍のパフォーマンス（MySQL比）

⚫️リードレプリカのクエリルーティング
：アプリケーションからの読み取り要求を自動的に最適なリードレプリカに振り分け可能。

⚫️フェイルオーバー（自動）
：プライマリが障害時には数十秒でリードレプリカが昇格。DNSエンドポイントも自動更新。

🔐 セキュリティと運用
⚫️IAM認証
：AuroraもRDSと同様、IAMユーザー・ロールによるDBログインが可能（MySQL/PostgreSQL限定）。

⚫️暗号化（Encryption）
：KMSによる**保存時暗号化（at rest）**と、**TLSによる通信時暗号化（in transit）**に対応。

⚫️バックアップとPITR
：自動バックアップ（最大35日）と、**ポイントインタイムリカバリ（PITR）**が可能。スナップショットも手動取得可。

⚫️Global Database（グローバルDB）
：Auroraクラスターを複数のリージョンにまたがって複製できる機能。低レイテンシでの読み取りやDR構成に最適。

🧪 管理・診断
⚫️パフォーマンスインサイト（Performance Insights）
：Auroraの負荷やクエリパフォーマンスを視覚的に分析できるツール。ボトルネック特定に便利。

⚫️パラメータグループ
：DBエンジンの詳細設定をまとめたグループ。Aurora専用のものを使用。

----------------------------------------------------------------------------
✅ RDSとの違い（ポイント比較）
項目	Amazon RDS	Amazon Aurora
エンジン	OSSそのまま	MySQL / PostgreSQL互換の独自実装
ストレージ	インスタンスごとに紐づく	クラスタ全体で共有・自動スケール
読み取りスケーラビリティ	最大5台まで	最大15台まで
フェイルオーバー速度	数分程度	数十秒以内（高速）
グローバルレプリケーション	一部対応	✅ Aurora Global Databaseあり
🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Aurora = RDS + 高速化しただけ	❌ Auroraは独立したDBエンジンで、アーキテクチャも異なる
Aurora Serverlessは常にスケールする	❌ Aurora Serverless v1は接続が途切れることがあり、v2を推奨
ストレージはAZに依存している	❌ Auroraのストレージは3AZに分散・自動冗長化されている

🌍 ユースケース例
高速なMySQL/PostgreSQLが必要なWebアプリケーション

書き込み負荷はそこまで高くないが読み取りが多いアプリ

グローバル展開：東京・バンコク・ロンドンの3リージョンでAurora Global Database

短期間で負荷が大きく変わるアプリ：Aurora Serverless v2

----------------------------------------------------------------------------
            ┌───────────────────────┐
            │   Aurora クラスター           │
            └───────────────────────┘
                 ▲               ▲
       プライマリ            リードレプリカ（最大15台）
     （書き込み＋読み取り）    （読み取り専用）
                 │
                 ▼
     ┌────────────────────────┐
     │   Auroraストレージ層（3AZ冗長）  │
     └────────────────────────┘




/****************** 4-1-2 Amazon Aurora Serverless ********************/
Amazon Aurora Serverless 周辺の主要用語と解説
⚫️Amazon Aurora Serverless
：Amazon Aurora のサーバーレス版。通常のDBインスタンスを手動でスケーリングする必要がなく、**アクセス量に応じて自動でキャパシティを調整（スケールイン／スケールアウト）**する仕組み。コスト効率が高く、小規模アプリやバースト処理に最適。

🧩 基本バージョンと違い
⚫️Aurora Serverless v1
：初期バージョン。スケーリングは段階的（例：2ACU→4ACU）で、スケール時に一時接続切断が発生する。現在は新規構築には非推奨。

⚫️Aurora Serverless v2（推奨）
：現行の最新バージョン。ほぼリアルタイムでスムーズにスケールでき、接続が切れずに拡張／縮小が可能。プロダクション用途に適する。

⚙️ 基本構成と用語
⚫️ACU（Aurora Capacity Unit）
：Aurora Serverless のスケーリング単位（CPU＋メモリの組み合わせ）。0.5 ACU〜数百 ACU までスケーリング可能。

⚫️キャパシティ範囲（Min/Max）
：Aurora Serverless v2 では、最小ACUと最大ACUを指定しておき、システムがその範囲内で自動スケーリングする。

⚫️スケーリング
：CPU・メモリを同時に増減させる処理。v2では秒単位で細かく対応。

⚫️DB クラスターエンドポイント
：Aurora Serverless はクラスターベースの構成となっており、クライアントは「エンドポイント」を通じてアクセス。リードレプリカ用のリードエンドポイントも使用可能。

💡 特徴と用途
⚫️アイドル時にコスト削減
：リクエストが来なければ最小ACUまで縮小し、事実上ゼロに近いコストで待機可能（v2）。

⚫️サーバーレスな運用
：インスタンスサイズの選定や管理が不要。インフラ意識なしでDB運用が可能。

⚫️バーストトラフィック対応
：アクセスが一時的に急増する場合でも、自動でスケールアップし性能を確保できる。

🔐 セキュリティと統合
⚫️VPC内配置
：他のAuroraと同様に、VPC内部で起動されるため、セキュリティグループやACLと連携可能。

⚫️IAM認証・暗号化
：Auroraと同じく、IAMによる認証、KMSによる暗号化、TLS通信などに対応。

⚫️AWS Lambda や App Runner との相性
：サーバーレスアーキテクチャ（FaaS）との連携に最適。リクエストに応じて Aurora もスケールするため、コスト効率が良い。


----------------------------------------------------------------------------
✅ Aurora Serverless 適用に向いているケース
シナリオ	理由
不定期に使われる社内ツール	常時起動不要・コストを抑えられる
アクセス量が読みづらい新サービス	オートスケーリングで過剰スペック不要
サーバーレスWebアプリ＋API	Lambda/App Runner との構成にマッチ
テスト・開発環境	コスト効率重視、縮退状態でも課金最小
🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Serverless だから無料？	❌ 最小ACUでも利用料金は発生（ただし従量課金で安価）
v1 でも大規模サービスに使える	❌ v1 はスケーリング時に接続切断があり、本番には不向き。v2 を使用すべき
EC2 のように常時稼働している	❌ 利用量に応じて自動起動・縮退する構造（v2ではよりスムーズ）

🌍 ユースケース例
LINEボット＋Lambdaで使われるチャット履歴DB

ECサイトでの在庫照会／商品検索用の読み取り専用DB

教育向けアプリの毎日1時間だけアクセスが集中する処理

開発環境やPoC用の軽量DBバックエンド
----------------------------------------------------------------------------
     [アプリケーション（API / Lambda）]
                  │
                  ▼
    ┌────────────────────────┐
    │   Aurora Serverless クラスター   │
    │  ├─ 自動スケール（0.5〜64 ACUなど） │
    │  └─ DBエンドポイント（接続用）     │
    └────────────────────────┘
                  │
           [Auroraストレージ層（共有）]




/****************** 4-2 Amazon DynamoDB ********************/
Amazon DynamoDB 周辺の主要用語と解説
⚫️Amazon DynamoDB
：AWSが提供するフルマネージドのNoSQLデータベースサービス。超高速でスケーラブル。キー・バリュー型＆ドキュメント型の両方に対応。サーバーレスで運用可能。

📘 データモデルと構成要素
⚫️テーブル（Table）
：データの集合。RDBでいうところの「表」。各テーブルには**主キー（Primary Key）**が必要。

⚫️主キー（Primary Key）
：DynamoDBで項目（アイテム）を一意に識別するキー。次の2種類：

パーティションキー（ハッシュキー）：単独の一意識別子

パーティションキー＋ソートキー（レンジキー）：複数項目をグループ化して並び替えも可能

⚫️アイテム（Item）
：1件のデータ。RDBでいう「行」にあたる。

⚫️属性（Attribute）
：アイテムの構成要素。RDBでいう「列」にあたる。各アイテムは柔軟なスキーマ（列が異なってもOK）。

🔍 インデックスと検索
⚫️ローカルセカンダリインデックス（LSI）
：同じパーティションキーで、別のソートキーを指定できるインデックス。テーブル作成時のみ設定可能。

⚫️グローバルセカンダリインデックス（GSI）
：パーティションキー／ソートキーを自由に設定できるインデックス。あとから追加可能。検索の柔軟性向上に使う。

⚫️クエリ（Query）
：パーティションキーで絞り込み、条件に一致するアイテムを検索。効率的。

⚫️スキャン（Scan）
：テーブル全体を走査して条件に一致するアイテムを探す。パフォーマンスは低下しやすい。

📈 性能とスケーリング
⚫️キャパシティモード（読み書き設定）
：DynamoDBの性能設定には2つのモードがある：

モード	特徴
プロビジョンド（Provisioned）	読み書き容量を事前指定。安定した処理に向く
オンデマンド（On-Demand）	自動スケーリング。アクセス量に応じて柔軟に処理（コスト変動型）
⚫️読み込み整合性（Read Consistency）
：読み込み方法には2種類：

強い整合性（Strongly Consistent Read）：常に最新データを返す（遅いが正確）

最終的整合性（Eventually Consistent Read）：少し遅れて最新になる（速い）

🔐 セキュリティと運用
⚫️IAMポリシー
：DynamoDBへのアクセスは、IAMによるリソースベース／ユーザーベースのポリシーで制御。

⚫️暗号化（Encryption at rest）
：保存時の暗号化はデフォルトで有効化済み。KMSキーもカスタム設定可能。

⚫️DynamoDB Streams
：テーブルに対する変更（追加・更新・削除）をリアルタイムで検知・ストリーム化できる機能。Lambdaなどと連携してイベント駆動設計に使える。

⚫️ポイントインタイムリカバリ（PITR）
：過去35日間の任意の時点にデータをロールバックできる機能。誤削除・誤操作対策に有効。

☁️ その他の便利機能
⚫️パーティション（Partition）
：データを自動的に複数の物理パーティションに分割して保存し、高スループットとスケーラビリティを確保。

⚫️トランザクション（Transaction）
：複数の書き込み／読み取りを一括して処理し、成功・失敗を一貫性ありで扱える。

⚫️Time to Live（TTL）
：アイテムごとに有効期限を設定し、自動削除できる機能。ログデータや一時的なデータに便利。



----------------------------------------------------------------------------
✅ 試験・設計でのポイント
主キー設計が最重要（アクセスパターン中心に設計）

読み取りはQueryで効率化、Scanは最終手段

オンデマンドモードはアクセスが読めない新規サービスに便利

ストリーム＋Lambdaでサーバーレスアーキテクチャと好相性

PITRやTTLなど、自動化・保護機能が豊富

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
DynamoDB は SQL で操作する	❌ SQL ではなく APIベース（SDKまたはDynamoDB CLI） で操作する
スキーマは固定されている	❌ DynamoDBは スキーマレス。アイテムごとに異なる属性もOK
複雑なJOINができる	❌ JOINは不可。RDBではなくNoSQLなので、データの正規化はしない方が良い

🌍 ユースケース例
ユーザーデータ／セッションデータ／設定情報の保存

IoTセンサーやモバイルアプリのデータストア（スケーラブルで速い）

ゲームのランキングデータ、チャット履歴など高速読み取りが求められるアプリ

Lambdaとの連携で完全サーバーレスなイベント処理

----------------------------------------------------------------------------
[ DynamoDB テーブル ]
     ├─ アイテム1：{ userId: "A123", name: "Alice", score: 80 }
     ├─ アイテム2：{ userId: "B456", name: "Bob", score: 92 }
     ├─ ...
     │
     ├─ GSI：scoreで並び替え検索可
     └─ DynamoDB Streams：変更イベントを Lambda に送信




/****************** 4-3 Amazon ElastiCahce ********************/

Amazon ElastiCache 周辺の主要用語と解説
⚫️Amazon ElastiCache
：AWSが提供するフルマネージドのインメモリキャッシュサービス。
データベースの負荷軽減、応答速度の高速化、セッション管理などに利用。
Memcached と Redis の2つのエンジンをサポート。

🧠 基本エンジンの違い
エンジン	特徴
Redis	高機能。永続化、レプリケーション、Pub/Sub、トランザクションに対応。
Memcached	シンプルで高速。分散処理に適し、データ永続化や複雑な機能は非対応。
⚙️ 用語と構成要素
⚫️ノード（Node）
：1台のキャッシュサーバーのこと。メモリ容量とパフォーマンスはインスタンスタイプで決まる。

⚫️クラスター（Cluster）
：ElastiCacheで構成されるノード群の集合。用途やエンジンによって構成が異なる。

Memcached：複数ノードの非同期な分散構成

Redis：複数ノードでレプリケーションやシャーディング構成が可能

⚫️プライマリノード（Primary）
：Redisクラスターでの書き込みを担当するノード。読み取りも可能。

⚫️リードレプリカ（Read Replica）
：Redisクラスターでの読み取り専用のノード。プライマリの負荷分散やフェイルオーバーに使われる。

⚫️スロット（Slot）
：Redisクラスターモードで使用されるキーのシャーディング単位（0〜16383）。各ノードに分散される。

🔁 レプリケーションと可用性
⚫️マルチAZレプリケーション
：Redisクラスターでは、異なるAZにプライマリとリードレプリカを配置して、障害時に自動フェイルオーバーできる。

⚫️自動フェイルオーバー
：プライマリがダウンした場合、リードレプリカが昇格して処理を継続する。

⚫️バックアップ（スナップショット）
：Redisのみ対応。定期的にデータをスナップショットとして保存し、復元が可能。Memcachedは非対応。

🛠️ パフォーマンスと機能
⚫️インメモリキャッシュ
：すべてのデータをメモリ（RAM）上に保持するため、非常に高速（マイクロ秒レベル）。

⚫️TTL（Time to Live）
：各キーに対して有効期限を設定できる。期限切れデータは自動で削除。

⚫️Eviction（削除ポリシー）
：メモリが不足した場合、古いまたは使われていないキーを削除する方式。LRUなどを設定できる。

🔐 セキュリティとアクセス制御
⚫️VPCサポート
：ElastiCacheはVPC内に配置でき、セキュリティグループでアクセス制御可能。

⚫️Redis AUTH
：Redisにはパスワード認証機能（AUTH）があり、クライアントアクセス時にパスワード確認が可能。

⚫️暗号化（Redisのみ）
：Redisでは保存時（at rest）および通信時（in transit）の暗号化に対応。KMSキーによる管理が可能。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
読み込み回数の多いデータはElastiCacheでキャッシュすることで、DBやAPIの負荷を大幅に削減

Redis：高機能・高可用性／Memcached：軽量・高速・スケールしやすい

RDSやDynamoDBとの組み合わせでキャッシュレイヤーとして導入されることが多い

フェイルオーバーや永続化が必要な場合はRedisを選ぶ

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Redis は永続化できない	❌ ElastiCache for Redis はスナップショット保存が可能
Memcached もフェイルオーバーできる	❌ Memcached はフェイルオーバーやレプリカなし
キャッシュは常に正確なデータを返す	❌ キャッシュは元データと一時的に不一致になることがある（整合性に注意）

🌍 ユースケース例
よくアクセスされる商品データやユーザープロフィールのキャッシュ

セッション管理（例：Webログイン状態）

リアルタイムチャットの一時データ保持やPub/Sub連携

ランキングやポイント計算などの高速参照処理

----------------------------------------------------------------------------
     [アプリケーション]
            │
      ┌────────────┐
      │ ElastiCache for Redis │
      └────────────┘
        ▲          ▲
   プライマリ    リードレプリカ
   （書き込み）     （読み取り）
        │
    [メモリ内データ]
        ▼
      TTL / Eviction / Snapshot




/****************** 4-4 Amazon Redshift ********************/
Amazon Redshift 周辺の主要用語と解説
⚫️Amazon Redshift
：AWSが提供するペタバイト級のフルマネージド型データウェアハウスサービス（DWH）。分析に特化したRDBMSで、SQLで大規模データを高速に集計・分析可能。

🏗️ 基本構成とデータ処理
⚫️クラスタ（Cluster）
：Redshiftの基本単位。1つのリーダーノード＋複数のコンピュートノードで構成される。

⚫️リーダーノード（Leader Node）
：SQLを受け取り、クエリを分解してコンピュートノードに振り分ける司令塔の役割。

⚫️コンピュートノード（Compute Node）
：実際にデータを保持・処理するノード。複数台で分散処理を行い、高速な並列処理を実現。

⚫️ノードタイプ
：クラスタの構成スペック。ストレージとCPU性能に応じて選択。

RA3：最新。ストレージと計算を分離可能。スケーラブルでおすすめ。

DC2（Dense Compute）：高速SSD。計算重視

DS2（Dense Storage）：HDDベース（旧型）

🧠 ストレージとパフォーマンス設計
⚫️カラムナストレージ（列指向）
：Redshiftは列ごとにデータを格納することで、大量データの集計処理を高速化している。

⚫️圧縮（Encoding）
：列ごとに最適な圧縮アルゴリズムを自動適用して、ストレージとI/O効率を向上。

⚫️分配キー（Distribution Key）
：データを複数ノードにどのように分散して保存するかを決めるキー。JOINや集計性能に影響する。

⚫️ソートキー（Sort Key）
：クエリでよく使うカラムに指定することで、検索効率が向上。時系列などでよく使用される。

🔁 読み書き・連携・ロード
⚫️COPYコマンド
：S3やDynamoDB、EMRなどから高速にデータをRedshiftにロードするコマンド。ETL処理の要。

⚫️UNLOADコマンド
：RedshiftからS3へデータを書き出す。CSVやParquet形式で出力できる。

⚫️Redshift Spectrum
：S3上のデータに対してRedshiftから直接クエリを実行できる拡張機能。大容量データをそのまま分析できる。

⚫️Redshift Data API
：アプリケーションからJDBC/ODBCを使わずにHTTP経由でSQLを実行できるAPI。サーバーレスアプリと相性が良い。

🔐 セキュリティと可用性
⚫️VPC内配置
：RedshiftクラスタはVPC内に起動され、セキュリティグループなどでアクセス制御が可能。

⚫️暗号化（Encryption）
：保存時（at rest）と通信時（in transit）のデータ暗号化に対応。KMSでキー管理。

⚫️スナップショット
：手動／自動で取得可能なRedshiftクラスタ全体のバックアップ。別リージョンへのコピーも可能。

⚫️フェイルオーバー（RA3のみ）
：マルチAZ構成での自動フェイルオーバーが可能。従来は単一AZだった。

📊 クエリ管理とモニタリング
⚫️Concurrency Scaling（同時実行拡張）
：同時実行クエリが多いときに、自動的に一時的なクラスタを追加してスループットを維持。

⚫️Query Monitoring Rule（QMR）
：特定のクエリ条件に応じて警告や停止などのアクションを自動化。重いクエリの制御に使える。

⚫️Performance Insights
：クエリの実行状況やボトルネックを可視化して分析できる機能。運用改善に有用。

----------------------------------------------------------------------------
✅ 試験・設計でのポイント
列指向ストレージ（カラムナ型）なので集計系に強い

Redshift SpectrumでS3を直接分析でき、DWHの拡張性が高い

分配キー／ソートキーの設計がクエリ性能に直結

RA3ノードでストレージと計算の分離が可能（スケーラブル）

RDSやS3、Athenaなど他サービスとの統合が容易

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Redshift はRDSの延長版	❌ Redshiftは分析専用DWH。OLTP向きではない
JSONなど非構造データに強い	❌ Redshiftは構造化データ（表形式）向け。JSON処理は限定的
JOINが速い = テーブル数が多くてもOK	❌ JOINは分配キーをうまく設計しないとパフォーマンスが落ちる

🌍 ユースケース例
数億〜数十億件の売上／顧客／ログデータを高速集計

Redshift SpectrumでS3上のログファイルを直接クエリ

Webアプリの利用データをBIツール（QuickSight）と連携

経営分析、マーケティングダッシュボードのバックエンド
----------------------------------------------------------------------------
      ┌────────────┐
      │   Redshift クラスタ   │
      └────────────┘
            ▲
   ┌────────────┐
   │ リーダーノード     │ ← クエリ受付・分解
   └────────────┘
        ▲        ▲
   ┌────────┐ ┌────────┐
   │ ノードA       │ │ ノードB       │ ← 分散処理・並列クエリ実行
   └────────┘ └────────┘
            ▲
        [S3] ← COPY/UNLOAD/Spectrumで連携




/****************** 4-5-1 Amazon DocumentDB ********************/
Amazon DocumentDB 周辺の主要用語と解説
⚫️Amazon DocumentDB（with MongoDB compatibility）
：AWSが提供するスケーラブルで高可用なドキュメント指向データベースサービス。MongoDB互換APIに対応し、MongoDB用アプリをそのまま移行可能。マネージド型・高可用性・スケーラブルが特長。

🗂️ 基本構成と用語
⚫️ドキュメントデータベース
：JSON形式のデータを1件ずつ「ドキュメント」として保存するNoSQLデータベース。柔軟なスキーマ設計が可能。

⚫️コレクション（Collection）
：RDBのテーブルに相当。ドキュメントのグループ単位。

⚫️ドキュメント（Document）
：RDBでの「行」に相当。JSONまたはBSON形式のデータオブジェクト。

⚫️インデックス
：検索やソートの高速化のために特定のフィールドに対して作成されるデータ構造。複合インデックスやユニーク制約も可能。

🔁 クラスター構成と拡張性
⚫️クラスター（Cluster）
：DocumentDBの基本構成単位。以下の3種類のノードで構成：

プライマリノード（Primary Node）：書き込みと読み取りを担当

リードレプリカ（Replica Node）：読み取り専用。最大15台まで追加可能

ストレージ層：データはクラスタ外の分散ストレージ層に自動保存・拡張される（最大64TiB）

⚫️スケーラビリティ
：ストレージは自動スケーリングされ、インスタンスを増やせば読み取り性能も拡張可能

⚫️フェイルオーバー
：プライマリノードに障害が発生した場合、リードレプリカが自動昇格して高可用性を実現。

🛡️ セキュリティと管理
⚫️VPC内配置
：DocumentDBインスタンスはVPC内に設置され、セキュリティグループで通信を制御可能。

⚫️IAMによる認証
：DocumentDBへの接続にIAM認証を使用可能（MongoDB 4.x以降）。

⚫️暗号化（Encryption）
：保存時（at rest）と通信時（in transit）の両方に対応。KMSと統合可能。

⚫️監査ログ
：認証やクエリ、変更操作のログを出力してCloudWatch Logsと連携可能。

📦 運用とメンテナンス
⚫️自動バックアップ
：指定期間（最大35日）の自動スナップショットによるバックアップと**ポイントインタイムリカバリ（PITR）**に対応。

⚫️手動スナップショット
：任意のタイミングで手動スナップショットを取得し、他リージョンへのコピーや復元に利用可能。

⚫️メンテナンスウィンドウ
：定期的なパッチ適用やアップグレードがユーザー指定の時間帯に行われる。

🧰 アプリ開発との統合
⚫️MongoDB互換API
：MongoDB用ドライバやクライアントライブラリがそのまま使用可能。既存アプリの移行が容易。

⚫️ドキュメント指向設計
：複雑な構造のデータ（入れ子・配列など）も1ドキュメントに含められ、JOIN不要のデータ設計が可能。

⚫️全文検索（別途連携）
：Elasticsearch（OpenSearch）と連携して高度な検索要件にも対応可能。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
MongoDBとの互換性が高く、クラウド移行がしやすい

JOINが不要なデータモデル（ネスト・配列）を設計するのが基本

フェイルオーバー、スケールアウト、暗号化、PITR などマネージド機能が豊富

書き込みは常にプライマリに行われる点に注意（リードレプリカは読み取り専用）

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
DocumentDB = DynamoDB	❌ DocumentDBはMongoDB互換のドキュメント型NoSQL、DynamoDBはキー・バリュー型NoSQL
リードレプリカに書き込みできる	❌ 書き込みは常にプライマリノードに行う必要あり
JSONデータは自由で管理不要	❌ スキーマは柔軟だが、検索性能や整合性を考慮した設計が必要

🌍 ユースケース例
MongoDBアプリケーションをクラウドに移行（例：CMS、業務システム）

ECサイトの商品データやユーザー設定の保存（JSON構造に適している）

ログ／セッション／イベントデータの記録と検索

IoTデバイスの構成や状態の記録データ管理

----------------------------------------------------------------------------
           ┌──────────────────────────┐
           │     Amazon DocumentDB クラスター     │
           └──────────────────────────┘
                   ▲
      ┌────────┐        ┌────────┐
      │ プライマリノード │        │ レプリカノード │  ← 最大15台まで
      └────────┘        └────────┘
                   │
         [分散ストレージ層（最大64TiB）]




/****************** 4-5-2 Amazon Neptune ********************/
Amazon Neptune 周辺の主要用語と解説
⚫️Amazon Neptune
：AWSが提供するフルマネージド型のグラフデータベースサービス。複雑な関係性（例：SNSのフォロー関係、推薦エンジン）を高速に検索・分析できる。RDF/SPARQLとProperty Graph/Gremlinの両方に対応。

🌐 グラフDBの基本構成
⚫️グラフデータベース
：ノード（点）とエッジ（線）でデータの関係性を表現するデータベース。
→ RDBのようなJOINを使わず、関係を直接たどるため複雑な関連検索が高速

⚫️ノード（Node）
：グラフ内のエンティティ（人・モノなど）を表す単位。例：ユーザー、商品、Webページなど

⚫️エッジ（Edge）
：ノード同士の関係（リンク）を表す線。例：友達、購入した、リンクしている、など

⚫️プロパティ（Property）
：ノードやエッジに付加される属性情報。例：ユーザー名、年齢、購入日など

🔍 対応するグラフモデルとクエリ言語
モデル	説明	クエリ言語
Property Graph	ノード＋エッジ＋プロパティを持つ構造	Gremlin
RDF（Resource Description Framework）	ノード・エッジ・値がすべてリソース（URI）	SPARQL
⚫️Gremlin
：Property Graphを操作するクエリ言語。JavaScript風の文法でノードをたどる処理が書ける。

⚫️SPARQL
：RDFモデルのための問い合わせ言語。セマンティックWebやナレッジグラフで使われる。

⚙️ 構成とスケーリング
⚫️Neptune クラスター
：**1つのプライマリノード（書き込み）＋最大15台のリードレプリカ（読み取り）**で構成される。マルチAZに対応。

⚫️プライマリインスタンス
：書き込みと読み取り両方を担当。1つだけ。

⚫️リードレプリカ
：読み取り専用のノード。クエリ負荷分散や高可用性構成に使用。

⚫️マルチAZフェイルオーバー
：プライマリ障害時に自動的にレプリカが昇格し、接続先も自動更新。

🛡️ セキュリティと管理
⚫️VPC内配置
：NeptuneインスタンスはVPC内に起動。セキュリティグループやIAMでアクセス制御。

⚫️暗号化（Encryption）
：保存時（at rest）と通信時（in transit）の両方をKMSで暗号化可能。

⚫️IAM認証
：GremlinやSPARQL APIへのアクセスにIAMポリシーを適用可能。

⚫️バックアップとPITR
：最大35日間の**自動スナップショットとポイントインタイムリカバリ（PITR）**に対応。

🔁 外部連携とツール
⚫️Neptune Workbench
：Jupyter Notebook ベースのインターフェース。GremlinやSPARQLのテスト実行や可視化が可能。

⚫️Amazon SageMaker 連携
：**機械学習とグラフの統合分析（例：リンク予測）**が可能。

⚫️Neptune Streams
：グラフへの変更をリアルタイムにキャプチャして、LambdaやKinesisへ送信できる機能。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
関係性をたどる処理（例：友達の友達、商品の共通購入者）に強い

Gremlin or SPARQL を要件に応じて選択（アーキテクチャに影響）

JOINが不要、関係性が深くてもクエリが高速

RDFモデル（SPARQL）はセマンティックWeb向け

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Neptune = RDS + 関係型検索対応	❌ NeptuneはRDBではなくグラフDB。JOIN構造とは異なる
SPARQLとGremlinは両方使える	❌ クラスター作成時にどちらを使うか選ぶ（両方同時利用は不可）
NeptuneはDynamoDBのようなNoSQL	❌ 構造はNoSQLだが、データモデルはグラフベースで用途が大きく異なる

🌍 ユースケース例
SNSやマッチングアプリの「誰が誰とつながっているか」分析

製品と部品の階層構造や依存関係の追跡

ナレッジグラフやセマンティック検索エンジンのバックエンド

不正検出（詐欺グループ間のパターン抽出など）


----------------------------------------------------------------------------
          ┌───────────────┐
          │   Neptune クラスター     │
          └───────────────┘
                 ▲
     ┌──────────┐
     │ プライマリインスタンス │ ← 書き込み＋読み取り
     └──────────┘
         ▲       ▲       ▲
  リードレプリカ  リードレプリカ  リードレプリカ（最大15台）

            │
         [ グラフDBエンジン ]
      Gremlin / SPARQL に対応



/****************** 4-5-3 Amazon Keyspaces ********************/

Amazon Keyspaces 周辺の主要用語と解説
⚫️Amazon Keyspaces（for Apache Cassandra）
：AWSが提供するマネージド型のApache Cassandra 互換 NoSQLデータベースサービス。スケーラブル・高可用で、サーバーレスアーキテクチャに対応。**CQL（Cassandra Query Language）**で操作できる。

🗂️ 基本構成とデータモデル
⚫️Cassandra
：分散型・スケーラブルな列指向NoSQLデータベース。高可用・高パフォーマンスで、可用性重視のシステムに広く使われている。

⚫️Keyspace（キースペース）
：RDBでいう「データベース」にあたる単位。テーブルの集合体であり、レプリケーション戦略などを定義する。

⚫️テーブル（Table）
：Cassandraでのデータ格納単位。スキーマは定義されるが、列の追加に比較的柔軟。

⚫️パーティションキー（Partition Key）
：データの分散場所を決定するキー。データはこのキーによってシャーディングされる。

⚫️クラスター列（Clustering Column）
：パーティション内でソート順序を制御するキー。パーティションキーと合わせてプライマリキーを構成。

⚫️アイテム（Row）
：1件のデータ。NoSQLだが、テーブルと列の構造を持つ。

⚙️ アーキテクチャと運用
⚫️サーバーレス設計
：Keyspacesはインフラ管理が不要な完全マネージド型。ノード追加やバックアップ設定も不要。

⚫️オンデマンドスケーリング
：トラフィック量に応じて自動的にスケーリングされる。プロビジョニング不要で、従量課金制。

⚫️高可用性／耐障害性
：複数のAZにまたがってデータを自動レプリケーション。99.999% SLAで稼働。

🔐 セキュリティとアクセス制御
⚫️IAMによるアクセス管理
：Keyspacesへの接続・操作は、IAMユーザーやロールで細かく制御可能（サービスポリシー対応）。

⚫️暗号化（Encryption）
：保存時（at rest）と転送時（in transit）の両方を暗号化。AWS KMS によるキー管理も可能。

⚫️VPCエンドポイント接続（PrivateLink）
：Keyspacesはデフォルトではパブリックエンドポイントだが、PrivateLinkを使ってVPCからプライベート接続も可能。

🔍 クエリと言語
⚫️CQL（Cassandra Query Language）
：SQL風の構文を持つCassandra専用のクエリ言語。SELECT, INSERT, UPDATE, DELETE などが利用可能。

⚫️制限付きクエリ構造
：JOIN、サブクエリ、集約関数（SUM/AVG）などは非対応。→ アクセスパターンを設計時に明確化することが重要

----------------------------------------------------------------------------
✅ 試験・設計でのポイント
Apache Cassandra互換のCQLをそのまま使える

**スキーマありのNoSQL（列指向）**で、パーティションキーとクラスター列でアクセスパターンを定義

サーバーレス、スケーラブル、メンテナンス不要

DynamoDBと似ているが、CQLを使いたい or Cassandraから移行したいときはKeyspaces

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Keyspaces = DynamoDBの別名	❌ 完全に別サービス。KeyspacesはCassandra互換／列指向NoSQL
SQLそのまま使える	❌ CQLはSQLライクだが、JOINやGROUP BYなどは使えない
RDSのようにバックアップ設定が必要	❌ Keyspacesは自動レプリケーション・高耐久性が組み込み済み

🌍 ユースケース例
Apache Cassandra からのマイグレーション先として

ユーザーのアクティビティログやイベントデータの保存・検索

セッション情報、IoTデバイスの状態記録、時系列データの保存

マルチテナント環境でのパーティション分離型データ設計


----------------------------------------------------------------------------

     ┌──────────────┐
     │  Amazon Keyspaces │
     └──────────────┘
             ▲
     ┌────────────────────┐
     │  Keyspace（例：app_data） │
     └────────────────────┘
             ▲
     ┌────────────────────────────┐
     │  テーブル（例：user_activity） │
     └────────────────────────────┘
             ▲
     パーティションキー：user_id
     クラスター列：activity_time





/****************** 4-5-4 Amazon Quantum Ledger Database ********************/
Amazon QLDB 周辺の主要用語と解説
⚫️Amazon QLDB（Quantum Ledger Database）
：AWSが提供するフルマネージド型の台帳データベースサービス。改ざんできないトランザクション履歴を持ち、ブロックチェーンのような特徴を持つが、中央集権的で高速なレコード管理に特化している。

📓 台帳型DBの特徴
⚫️台帳（Ledger）
：すべての変更履歴を記録するための不変なログ構造。QLDBでは、アプリが実行したすべてのデータ変更がトランザクションログとして保存される。

⚫️不変性（Immutability）
：一度記録されたトランザクションは変更・削除できない。そのため、追跡性・透明性が高く、改ざん防止が保証される。

⚫️ジャーナル（Journal）
：データベースの変更履歴を記録する不変のログファイル。すべてのデータ操作はこのログに追加され、監査・証明に使える。

⚫️クエリ可能な履歴（History）
：通常の最新データだけでなく、「このデータは過去にどう変わったか？」という履歴もクエリで取得可能。

🧩 構成要素と操作
⚫️テーブル（Table）
：ドキュメントデータ（JSON形式）を格納する単位。RDBに似た構造を持ちつつ、スキーマレスに近い柔軟性もある。

⚫️ドキュメント（Document）
：1レコードにあたるJSONベースのデータ構造。NoSQL風だがトランザクションや履歴機能を併せ持つ。

⚫️PartiQL
：SQLライクなクエリ言語。Amazon QLDBでは SELECT、INSERT、UPDATE、DELETE、HISTORY などの操作が可能。

⚫️トランザクション
：データの変更は必ずトランザクションとして実行される。ACID準拠で、整合性が保証される。

🛡️ セキュリティと監査性
⚫️完全性検証（Verification）
：QLDBはジャーナルの暗号化ハッシュを元に整合性を検証可能。改ざんがないことを数学的に証明できる。

⚫️暗号化
：保存時（at rest）と送信時（in transit）の暗号化に対応。KMSによるカスタムキーも使用可。

⚫️VPC内配置
：PrivateLink を使えば、VPC内からプライベート接続が可能。

⚫️IAMによるアクセス制御
：テーブル単位、操作単位（読み取り・書き込みなど）で細かくポリシー制御可能。


----------------------------------------------------------------------------

✅ 試験・設計でのポイント
ブロックチェーンのような不変な履歴を保持したいが、許可型（非分散型）で良い場合に最適

全ての変更はジャーナルとして保存され、過去データの追跡・証明ができる

SQLライクな PartiQL を使って簡単にクエリ可能

ブロックチェーンと違って、中央集権モデルで管理性・スループットに優れる

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
QLDB はブロックチェーン	❌ 類似機能（不変性・検証）はあるが、非分散・中央管理型の台帳DB
データの変更は上書きされる	❌ 上書きではなく、すべての変更履歴が保存されている（ジャーナル）
NoSQLでトランザクションは使えない	❌ QLDBはACIDトランザクションをサポートしている


🌍 ユースケース例
金融や保険業界でのトランザクションログの信頼性確保

監査記録やユーザー操作履歴の保存と検証

サプライチェーンや物流管理での変更追跡

契約・電子署名・変更履歴を保存する文書管理システム



----------------------------------------------------------------------------
         ┌────────────────────┐
         │  Amazon QLDB Ledger       │
         └────────────────────┘
                   │
           ┌───────────────┐
           │   テーブル（Documents）    │
           └───────────────┘
                   │
         ┌──────────────┐
         │ ジャーナル（不変ログ） │ ← INSERT / UPDATE / DELETE の記録
         └──────────────┘
                   ▼
         PartiQL で履歴検索（HISTORY）




/****************** 4-5-5 Amazon Timestream ********************/
Amazon Timestream 周辺の主要用語と解説
⚫️Amazon Timestream
：AWSが提供するサーバーレス・マネージド型の時系列データベースサービス。IoTデータやアプリのメトリクスなど、時間とともに増えていくデータ（時系列データ）を高速かつコスト効率よく処理・分析できる。

📈 時系列DBの特徴
⚫️時系列データ（Time-Series Data）
：時間（タイムスタンプ）を軸として記録されるデータ。例：温度ログ、CPU使用率、センサーの値など。

⚫️Timestreamの用途
：IoT、アプリケーションメトリクス、インフラ監視など、連続して記録されるデータを高速に集計・分析する用途に最適。

🧩 基本構成と用語
⚫️データベース（Database）
：Timestreamでの最上位の論理単位。1つのデータベースに複数のテーブルを持てる。

⚫️テーブル（Table）
：データを実際に格納する単位。1テーブルには、複数のメジャー、ディメンション、タイムスタンプを持つデータが記録される。

⚫️タイムスタンプ（Time）
：各レコードに必須の時間情報。時系列データを識別・並び替えるための基本軸。

⚫️ディメンション（Dimension）
：データの分類や識別に使う属性。例：region, device_id, user_id など。

⚫️メジャー（Measure）
：記録対象の値。例：temperature, cpu_usage, battery_voltage など。
→ 数値・文字列・真偽値などの型に対応。

📦 ストレージとライフサイクル
⚫️メモリーストア（Memory Store）
：最近のデータを保存する高速ストレージ。クエリも即時性が求められる。

⚫️マグネティックストア（Magnetic Store）
：古いデータを長期保存する低コストストレージ。読み込みは遅いが安価。

⚫️データ保持期間（Retention Policy）
：各テーブルに対して、メモリーストアとマグネティックストアそれぞれに保持期間を設定可能。例：7日間はメモリー、その後365日間はマグネティック。

🔍 クエリと分析
⚫️Timestream クエリエンジン
：SQLライクなクエリ言語に対応（SELECT, WHERE, GROUP BY, ORDER BY など）。
→ 時間ウィンドウ関数（bin(), time_series()）や集約関数が豊富。

⚫️時系列関数
：bin(time, 15m) のように、時間を一定間隔で区切って集計できる。→ グラフ化しやすい。

⚫️サブクエリ／ネストクエリ
：Timestreamは複雑な分析クエリやサブクエリにも対応。柔軟なデータ抽出が可能。

☁️ 運用と統合
⚫️サーバーレス
：インフラのプロビジョニングやスケーリング不要。自動で処理能力を調整。

⚫️自動スケーリング
：データ挿入量に応じて自動スケール。書き込み性能の心配がいらない。

⚫️統合サービス
：IoT Core / Kinesis / CloudWatch / Grafana / QuickSight などと連携。リアルタイムダッシュボードも可能。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
センサー・メトリクス・ログなどの時系列データの保存と分析に特化

Retention設定により、コストと分析スピードの最適化が可能

時系列関数（binなど）を使ったクエリが分析の肝

サーバーレスで運用コストが低く、スケーラビリティも高い

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Timestream は DynamoDB の一種	❌ Timestream は 時系列DB専用の独立サービス
全データがメモリに保存される	❌ 一定期間後はマグネティックストアに移動（コスト最適化のため）
SQLとまったく同じ文法	❌ SQLライクだが、時系列特化の関数がある点に注意

🌍 ユースケース例
IoTデバイスのセンサーデータ収集と分析（温度・湿度・振動など）

アプリケーションメトリクスの保存と可視化（レスポンスタイム、PV数など）

インフラ監視ログ（CPU使用率、ディスクI/Oなど）

金融やゲームのリアルタイムイベント分析

----------------------------------------------------------------------------
        ┌────────────────────────┐
        │     Amazon Timestream        │
        └────────────────────────┘
                    ▲
         ┌────────────────────┐
         │ テーブル：device_metrics     │
         └────────────────────┘
                    ▲
      [Time]：2024-04-01T12:00:00Z
      [Dimension]：device_id="abc123"
      [Measure]：cpu_usage = 45.2

        ▼
  メモリーストア（高速・直近データ）
        ▼（期限後）
  マグネティックストア（長期・低コスト）




