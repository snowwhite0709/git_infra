【AWS】用語集
***********************
******* VPC周辺 *******
***********************


/****************** 2-1 Amazon EC2 ********************/
Amazon EC2 周辺の主要用語と解説
⚫️Amazon EC2（Elastic Compute Cloud）
：AWSが提供する仮想サーバーサービス。
必要な時に起動・停止でき、CPU・メモリ・ストレージなどを自由に選択できる。
従量課金制。

⚫️AMI（Amazon Machine Image）
：EC2インスタンスのOSやミドルウェアなどのテンプレート。
起動時にこのイメージをもとにインスタンスを作成する。

⚫️インスタンスタイプ
：EC2インスタンスの性能（CPU、メモリ、ネットワーク）を規定する分類。
例：t3.micro（低コスト汎用）やc5.large（コンピューティング向け）など。

⚫️インスタンスストア
：一時的なローカルストレージ。
インスタンス停止や再起動でデータが消える。
高速だが永続性がない。

⚫️EBS（Elastic Block Store）
：EC2にアタッチして使う永続的なブロックストレージ。
SSDやHDDタイプが選べる。
スナップショットでバックアップも可能。

⚫️EBSボリューム
：EBSのストレージ単位。
EC2インスタンスに接続してOSやアプリのデータを保存する。

⚫️EBSスナップショット
：EBSのバックアップをS3に保存する仕組み。
インクリメンタル（差分）で保存され、復元や複製に使われる。

⚫️Elastic IP
：固定のグローバルIPv4アドレス。
EC2に割り当ててインターネット接続を確保する。
使っていないと課金される。

⚫️セキュリティグループ
：インスタンスに対する仮想ファイアウォール。
インバウンド／アウトバウンドの通信許可ルールを定義する。
ステートフル。

⚫️キーペア（Key Pair）
：EC2へのSSH接続に使う公開鍵・秘密鍵のセット。
Linuxインスタンスへはこれを使ってログインする。

⚫️ユーザーデータ（User Data）
：インスタンス起動時に自動で実行されるスクリプトを指定できる機能。
初期設定やアプリのインストールに活用。

⚫️Auto Scaling
：インスタンス数を負荷に応じて自動的に増減させる仕組み。
高可用性とコスト最適化を両立できる。

⚫️Launch Template（起動テンプレート）
：インスタンス起動時の設定（AMI、タイプ、タグなど）をまとめて管理できるテンプレート。
Auto Scalingやスポットインスタンスと併用される。

⚫️スポットインスタンス
：余剰のEC2リソースを割引価格で提供。
途中で停止される可能性があるが、コスト効率が高い。

⚫️リザーブドインスタンス
：1年 or 3年契約で利用する前提の割引料金。
長期間使用する場合は大幅なコスト削減が可能。

⚫️Capacity Reservation（キャパシティ確保）
：将来のためにインスタンスの起動枠だけを予約するサービス。
ミッションクリティカルな環境で活用される。

⚫️EC2インスタンスメタデータ
：EC2の中から自身のインスタンスIDやIAMロールなどの情報を取得できる仕組み。
HTTP経由でアクセス可能（例：http://169.254.169.254）。



----------------------------------------------------------------------------
✅ 試験でのポイント
EC2の**ライフサイクル管理（起動→停止→終了）**の挙動とストレージへの影響
EBSボリュームとスナップショットの関係
Auto ScalingとLaunch Templateの連携
スポット・オンデマンド・リザーブドインスタンスの使い分け
セキュリティグループとNACLの適用範囲の違い

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
EBSはインスタンス停止で消える	❌ 終了時に消える設定にしていない限り、停止では残る
セキュリティグループはNACLと同じ	❌ インスタンス単位でステートフルなファイアウォール
Elastic IP は無料	❌ 未使用状態では課金される
----------------------------------------------------------------------------




/****************** 2-2 Amazon EC2 Auto Scaling ********************/
Amazon EC2 Auto Scaling 周辺の主要用語と解説
⚫️Amazon EC2 Auto Scaling
：需要に応じてEC2インスタンス数を自動的に増減させる仕組み。
高可用性を確保しつつ、コストも最適化できる。

⚫️Auto Scaling グループ（ASG）
：スケーリングの対象となるEC2インスタンスの集合。
最小・最大・希望インスタンス数などを設定。

⚫️起動テンプレート（Launch Template）
：Auto Scalingで使うEC2の**起動設定（AMI、インスタンスタイプ、セキュリティグループなど）**をまとめたテンプレート。

⚫️起動構成（Launch Configuration）
：旧式の起動設定。
Launch Templateの方が機能豊富で、現在は非推奨。

⚫️スケーリングポリシー（Scaling Policy）
：スケールイン・スケールアウトのタイミングやルールを定める。下記の種類がある。
　　⚫️動的スケーリング（Dynamic Scaling）
　　：CloudWatchのメトリクス（例：CPU使用率）に応じて、リアルタイムにインスタンス数を調整する。
　　⚫️スケジュールスケーリング（Scheduled Scaling）
　　：特定の時間帯に合わせてインスタンス数を増減する。例：9時～18時だけ増やす。
　　⚫️ターゲット追跡スケーリング（Target Tracking）
　　：CloudWatchメトリクスを特定の目標値に保つように自動調整。最も簡易で推奨される方法。

⚫️ライフサイクルフック（Lifecycle Hook）
：スケーリング中のEC2インスタンスに対して、起動直後や終了直前に一時停止して任意の処理を挟める機能。

⚫️ウォームアップ時間（Warm-up Time）
：新しく起動したインスタンスをスケーリングの対象に含めるまでの待機時間。
急なスケーリング連発を防ぐ。

⚫️クールダウン時間（Cooldown Period）
：スケーリング操作の間隔制限。
スケールアウト直後にすぐスケールインするのを防ぐ。

⚫️ヘルスチェック（Health Check）
：ASG内のインスタンスが正常に動作しているかを確認し、異常な場合は自動で置き換える。

⚫️Elastic Load Balancer（ELB）との連携
：Auto ScalingとELBを連携させることで、スケーリングされたインスタンスへ自動でトラフィックを振り分けられる。

⚫️置き換え戦略（Instance Refresh）
：ASG内のインスタンスを順番に入れ替える仕組み。
AMIの更新やセキュリティパッチの適用に利用。

⚫️ミックスインスタンスタイプ（Mixed Instances Policy）
：複数のインスタンスタイプや購入オプション（オンデマンド＋スポット）を組み合わせて柔軟なスケーリング構成を作成。


----------------------------------------------------------------------------
✅ 試験でのポイント
ターゲット追跡スケーリングが推奨される理由（単純で効果的）
EC2のヘルスチェック vs ELBのヘルスチェック の違い
スケジュール vs 動的 vs ターゲット追跡 の使い分け
起動テンプレートの指定が必須（Launch Configurationは旧式）
ELBとの連携でトラフィックを分散＋冗長化

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
スケーリングは常に手動設定	❌ CloudWatchの自動ルールで動作する
Auto Scalingでは常に同じインスタンスを使用	❌ ミックスインスタンスポリシーで多様なインスタンスが使える
クールダウンとウォームアップは同じ意味	❌ クールダウン＝操作間隔、ウォームアップ＝対象外待機時間



----------------------------------------------------------------------------
┌──────────────┐
│  Auto Scaling Group       │
│  ┌──────┬──────┬──────┐  │
│  │ EC2-1 │ EC2-2 │ EC2-3 │  │ ← 台数が自動調整される
│  └──────┴──────┴──────┘  │
│       ▲          ▲          ▲
│       │          │          │
│   Launch Templateで起動      │
└──────────────┘
          ▲
          │
  ┌────────────┐
  │  Elastic Load Balancer │ ← 自動でトラフィックを振り分け
  └────────────┘








/****************** 2-3 AWS Elastic Beanstalk ********************/
AWS Elastic Beanstalk 周辺の主要用語と解説
⚫️AWS Elastic Beanstalk
：アプリケーションのデプロイ・管理を簡略化するPaaS型サービス。コードをアップロードするだけで、インフラ（EC2、ALB、Auto Scalingなど）を自動で構築・運用してくれる。

⚫️アプリケーション（Application）
：Elastic Beanstalkで管理されるアプリ全体の枠組み。複数の環境（例：開発・本番）を含む。

⚫️環境（Environment）
：1つのアプリケーションに対する具体的なインフラ構成（EC2、RDS、ALB など）を指す。アプリは複数の環境を持てる。

⚫️環境タイプ
：以下の2種類から選択する。
　　・Webサーバー環境：Webアプリ向け。ALB や Auto Scaling 付き。
　　・ワーカー環境：非同期バックエンド処理向け。SQSを通じてジョブを受信。

⚫️プラットフォーム（Platform）
：Elastic Beanstalkが提供する実行環境の種類。例：Java、Python、Node.js、.NET、Dockerなど。

⚫️アプリケーションバージョン（Application Version）
：アップロードされたソースコードのスナップショット。環境ごとにどのバージョンを使うかを指定可能。

⚫️構成テンプレート（Configuration Template）
：環境の設定内容（インスタンスタイプ、容量、ヘルスチェックなど）を再利用・複製可能なテンプレートとして保存したもの。

⚫️構成ファイル（.ebextensions）
：Elastic Beanstalk環境のカスタム設定やインストール処理を定義するYAMLファイル。コードと一緒に配置することで設定を自動適用できる。

⚫️eb CLI（Elastic Beanstalk Command Line Interface）
：Beanstalkをコマンドラインから操作するツール。アプリのデプロイや環境の作成が簡単に行える。

⚫️Elastic Load Balancing（ELB）との統合
：Web環境では**ALB（アプリケーションロードバランサ）**が自動で組み込まれ、トラフィックがスケーリングされたEC2に分散される。

⚫️Auto Scalingとの統合
：Elastic Beanstalkはインスタンス数の増減を自動制御してくれるため、トラフィックの変動にも対応可能。

⚫️CloudWatchとの統合
：Beanstalk環境のパフォーマンス監視に利用される。例：CPU使用率、ヘルスステータスなど。

⚫️Blue/Greenデプロイメント
：新しいバージョンを別の環境にデプロイしてから切り替える方式。ダウンタイムを最小限に抑えてリリース可能。


----------------------------------------------------------------------------
✅ 試験でのポイント
インフラ構築を自動化したい場合は Beanstalk（開発者にやさしいPaaS）

環境タイプ：Webサーバー vs ワーカーの違い

.ebextensions でのカスタム処理挿入（例：設定ファイル、パッケージの追加）

Auto Scaling や ELB を裏で自動利用している点に注目

Blue/Green デプロイによるリリース戦略の特徴

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Beanstalkはサーバーレス	❌ 裏ではEC2などが動いており、料金もEC2などに基づく
DockerやGoは使えない	❌ プラットフォームとして対応している
Beanstalk独自のDBを持つ	❌ RDSなどを外部サービスとして連携する（環境削除時にDBも削除されるので注意！）

----------------------------------------------------------------------------
         ┌────────────────────┐
         │   Elastic Beanstalk   │
         │（アプリ全体の枠組み） │
         └────────────────────┘
                       │
            ┌───────────────┐
            │   環境（Web or Worker） │
            └───────────────┘
                       │
     ┌────────────┬────────────┐
     │    EC2（Web/App）     │    RDS（DB）など外部サービス
     │    ELB（ロードバランサ） │
     │    Auto Scaling        │
     └────────────┴────────────┘




/****************** 2-4 AWS Batch ********************/
AWS Batch 周辺の主要用語と解説
⚫️AWS Batch
：コンテナ（Docker）ベースで大規模なバッチ処理を自動的に実行・管理するサービス。最適な数のコンピュートリソース（EC2やFargate）を自動でスケジューリングしてくれる。

⚫️ジョブ（Job）
：AWS Batchで実行される1つのバッチ処理タスク。実行するDockerイメージ、コマンド、メモリ・vCPUなどを指定。

⚫️ジョブ定義（Job Definition）
：ジョブを実行するためのテンプレート設定。使用するコンテナイメージ、リソース要件、環境変数、リトライ条件などを定義する。

⚫️ジョブキュー（Job Queue）
：ジョブの待機場所。複数のキューを作成でき、優先度による実行順制御や、異なるコンピュート環境への割り当ても可能。

⚫️コンピュート環境（Compute Environment）
：ジョブを実行するためのリソースプール（EC2 または Fargate）。AWS Batchがリソースを動的にプロビジョニング／スケーリングする。

⚫️マネージドコンピュート環境
：AWS Batchがインスタンスタイプやスケーリングを自動管理する設定。ユーザーが手動管理しない。

⚫️アンマネージドコンピュート環境
：インスタンスの種類や数をユーザーが明示的に管理する必要がある構成。

⚫️EC2ベースのコンピュート環境
：バッチ処理をEC2インスタンスで実行。複雑な処理や高性能なリソースが必要な場合に選ばれる。

⚫️Fargateベースのコンピュート環境
：バッチ処理をFargate（サーバーレスなコンテナ）で実行。サーバーレスで管理不要、小規模またはイベント駆動型に適する。

⚫️デペンデンシージョブ（依存関係ジョブ）
：特定のジョブが他のジョブの完了後に実行されるようにする設定。ワークフローの構築が可能。

⚫️Array Job（配列ジョブ）
：同じジョブ定義で複数インスタンスを一括実行できる仕組み。パラメータが異なるバッチ処理に最適。

⚫️ジョブの再試行（Retry Strategy）
：ジョブが失敗した場合に自動で再試行する条件を定義可能。失敗時の安定性向上に役立つ。

⚫️ジョブステータス
：SUBMITTED, PENDING, RUNNABLE, STARTING, RUNNING, SUCCEEDED, FAILED など、ジョブの状態が細かく追跡できる。

⚫️IAM ロール（Batch サービスロール & インスタンスロール）
：Batchサービスがリソース（CloudWatch, ECSなど）にアクセスするための権限設定。

⚫️CloudWatch Logs
：ジョブの出力やエラーをCloudWatchでリアルタイム監視・ログ収集できる。


----------------------------------------------------------------------------
✅ 試験でのポイント
ジョブ定義 → ジョブキュー → コンピュート環境 の三段階構成を理解

EC2ベースとFargateベースの使い分け

Array Jobや依存関係ジョブの指定方法

マネージド vs アンマネージド の管理範囲の違い

IAMロールとログ出力の連携（CloudWatch）

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
ジョブ定義がすぐに実行される	❌ ジョブキューに登録され、条件に応じてスケジュールされる
Fargateは常に安い	❌ 小規模には向くが、長時間／高性能な処理ではEC2が経済的
Batchはワークフローが組めない	❌ ジョブの依存関係で順序制御は可能（Step Functions連携でさらに拡張可）

----------------------------------------------------------------------------
【1】ジョブ定義
　　→ 使用イメージ、コマンド、リソース要件などを定義

【2】ジョブキュー
　　→ 優先度付きでジョブを待機・割り振り

【3】コンピュート環境（EC2 または Fargate）
　　→ 実行リソースが自動プロビジョニング

【実行フロー】
　ジョブ送信 → ジョブキュー → コンピュート環境 → 実行・監視





----------------------------------------------------------------------------

/****************** 2-5-1 AWS Outposts ********************/
AWS Outposts 周辺の主要用語と解説
⚫️AWS Outposts
：AWSが提供する物理機器をユーザーのオンプレミスに設置し、クラウドと同じサービスをローカルで提供するハイブリッドクラウドサービス。ネットワークを通じてAWSと常に接続されている。

⚫️ハイブリッドクラウド
：オンプレミスとパブリッククラウドを統合して活用するアーキテクチャ。Outpostsはその代表例の1つ。

⚫️Outposts ラック
：標準的なOutpostsの形式。**フルサイズのラック（19インチ）**に、EC2、EBS、RDS などのハードウェアが搭載され、オンプレミスでAWSサービスが利用できる。

⚫️Outposts サーバー
：小規模構成向けのOutposts。1Uまたは2Uサイズのサーバーで、リモートオフィスや小規模環境に適している。

⚫️EC2 on Outposts
：Outposts上で動作する仮想マシン。通常のEC2と同じAPIで操作可能で、レイテンシーの低い処理が可能。

⚫️EBS on Outposts
：Outpostsに接続されたブロックストレージ。オンプレミス上のEC2に永続ストレージを提供。

⚫️RDS on Outposts
：オンプレミスでRDS（リレーショナルデータベース）を動作させるサービス。MySQL や PostgreSQL をローカルで実行可能。

⚫️Local Gateway（LGW）
：オンプレミス側とOutpostsをつなぐネットワークゲートウェイ。VPCとローカルネットワークの通信を中継する。

⚫️Service Link
：OutpostsとAWSリージョンを接続する専用の管理ネットワークリンク。状態監視や制御指令の送受信に使用される。

⚫️ネットワーク要件
：Outpostsを設置するにはインターネット or AWS Direct Connect の安定した接続が必要。Service Link経由でAWSのコントロールプレーンと通信する。

⚫️ローカルゲートウェイルートテーブル
：オンプレミスへのルート制御を行うテーブル。AWSからローカル環境へのトラフィックの経路を定義する。

⚫️Outposts アクセス用IAMロール
：Outpostsを管理するためのIAMロールとポリシー。特定のユーザー／サービスに制御権限を付与できる。

⚫️オンプレミスアプリケーションとの連携
：製造業や医療現場など、レイテンシーが重要なアプリケーションをOutposts上に配置しつつ、バックアップや分析はAWSクラウド側で処理する構成が取られる。


----------------------------------------------------------------------------
✅ 試験でのポイント
OutpostsはクラウドAPIで操作できるオンプレミス環境

レイテンシーが重要なワークロードに最適（例：医療、工場制御）

OutpostsではAWSリージョンと常時接続が必要（切断時の制限も理解しておく）

EC2/EBS/RDSが対応（S3は未対応 → Snowball EdgeやStorage Gatewayで代替）

ハイブリッド設計・レイテンシー対策の選択肢として登場する可能性あり

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
OutpostsだけでAWSと同等の機能が完結する	❌ 常時AWSリージョンとの接続が必要（Service Link）
S3もOutposts上で利用可能	❌ S3は現時点で未対応。代わりにStorage GatewayやSnowball Edgeを使う
通常のEC2とは管理方式が異なる	❌ 同じAPI／CLIで管理できる

----------------------------------------------------------------------------
┌──────────── AWS Cloud ─────────────┐
│                                    │
│   EC2、S3、CloudWatch、IAMなど        │
│                                    │
└────┬───────────────────────┘
     │ Service Link（制御用）⬇
┌────┴──── AWS Outposts（オンプレ） ────┐
│                                        │
│   EC2インスタンス、EBS、RDS            │
│   ローカルゲートウェイ経由で            │
│   オンプレネットワークと通信可能         │
└────────────────────────────┘




/****************** 2-5-2 AWS Serverless Application Repository ********************/
AWS Serverless Application Repository 周辺の主要用語と解説
⚫️AWS Serverless Application Repository（SAR）
：AWSが提供するサーバーレスアプリケーションの共有・配布サービス。Lambdaベースのアプリを他の開発者と共有・再利用できる。テンプレートのように使える。

⚫️サーバーレスアプリケーション
：Lambda関数を中心に、API Gateway、DynamoDB、S3、SNS などと連携して構成されたサーバー管理不要のアプリケーション群。SARはこれらを1パッケージとして扱う。

⚫️アプリケーション（SARにおける）
：SARに登録された1つのサーバーレスアプリケーション。CloudFormationテンプレートで定義され、必要に応じてパラメータを入力してデプロイ可能。

⚫️アプリケーションテンプレート
：SARで共有されるCloudFormationベースの構成テンプレート。Lambdaやリソース定義を含む。再利用可能な構造。

⚫️デプロイ
：SARで公開されたアプリケーションを、自分のAWSアカウントに**実際に展開（インストール）**する操作。マネコンまたはCLIから可能。

⚫️パブリッシュ（公開）
：自分が作成したサーバーレスアプリをSARに登録・共有すること。公開アプリは他のユーザーが使えるようになる。

⚫️公開アプリケーション
：全世界のAWSユーザーが利用可能なSARのアプリケーション。セキュリティや著作権に注意して公開する必要がある。

⚫️プライベートアプリケーション
：SAR上に登録されているが、特定のアカウントや組織内のみで利用可能に制限されたアプリ。社内用テンプレートなどに使う。

⚫️AWS CloudFormation
：SARアプリのデプロイに使用されるインフラ定義サービス。SARはCloudFormationテンプレートで全構成を定義している。

⚫️AWS SAM（Serverless Application Model）
：SARアプリケーションを記述・管理するための簡略化されたCloudFormation構文。YAML形式でサーバーレス構成を定義する。

⚫️AWS SAM CLI
：サーバーレスアプリをローカルでテスト・ビルド・パッケージ・デプロイするためのツール。SARへの登録時にも利用される。

⚫️アプリケーションバージョン管理
：SARではアプリケーションのバージョンごとに更新履歴を保持でき、過去バージョンへのロールバックも可能。


----------------------------------------------------------------------------
✅ 試験でのポイント
SAR は 再利用可能なサーバーレスアプリを配布・利用するマーケットプレイス的存在

デプロイは CloudFormationテンプレートベース

SAM（Serverless Application Model） を活用して構成・展開

公開と非公開の切り分け（社内利用 or 公開利用）

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
SARのアプリはLambda関数だけ	❌ Lambdaに加え、API Gateway、DynamoDBなどを含むアーキテクチャ
SARのアプリはすべて有料	❌ 無料で公開・利用可能（料金はリソース利用分のみ）
SARは個人開発者しか使えない	❌ 組織・企業でも プライベートテンプレート配布に活用可能

----------------------------------------------------------------------------
┌─────────────────────────────┐
│   AWS Serverless Application Repository │
│   （SAR）                            │
└─────────────────────────────┘
                ▲   ▲
   デプロイ    │   │  パブリッシュ
                │   ▼
   ┌──────────────┐
   │ CloudFormation テンプレート │
   └──────────────┘
                │
     ┌────────────────────┐
     │ Lambda / API Gateway / S3 │ ← サーバーレス構成
     └────────────────────┘





/****************** 2-5-3 VMware Cloud on AWS ********************/
VMware Cloud on AWS 周辺の主要用語と解説
⚫️VMware Cloud on AWS
：オンプレミスで使用しているVMware環境（vSphere, vSAN, NSXなど）を、そのままAWS上で稼働できるハイブリッドクラウドサービス。VMwareとAWSが共同提供。

⚫️vSphere
：仮想マシンを管理・実行するVMwareの仮想化プラットフォーム。AWS上でもESXiを利用し、オンプレと同様にVMを管理できる。

⚫️vSAN（Virtual SAN）
：VMwareが提供するソフトウェア定義ストレージ。複数のESXiホストのローカルディスクを統合し、共有ストレージとして機能。

⚫️NSX
：仮想ネットワークとセキュリティを提供するVMwareのネットワーク仮想化プラットフォーム。ファイアウォール、ルーティング、VPNなどをソフトウェアで制御。

⚫️SDDC（Software-Defined Data Center）
：VMware Cloud on AWSにおいて、vSphere + vSAN + NSX が統合されたクラスタ構成。これを1ユニットとして展開する。

⚫️SDDC クラスタ
：1つのSDDCを構成するESXiホスト群（通常3～16台）。リソースは拡張可能で、高可用性が確保されている。

⚫️Hybrid Linked Mode（HLM）
：オンプレミスのvCenterと、AWS上のvCenterを1つの管理画面で統合管理できるモード。移行やハイブリッド運用が容易。

⚫️Live Migration（vMotion）
：VMをダウンタイムなしでオンプレ → AWSや逆方向に移行する技術。アプリケーションを止めずにクラウド移行が可能。

⚫️HCX（Hybrid Cloud Extension）
：VMware環境間で大量のVMを安全・高速に移行するためのツール。ネットワークの差異も吸収でき、移行中も接続を維持可能。

⚫️Elastic Network Interface（ENI）
：VMware SDDCとAWS VPC間のプライベートネットワーク接続用インターフェース。高速・低遅延な通信が可能。

⚫️Direct Connect（DX）連携
：オンプレ → VMware Cloud on AWS → AWS本番環境までを専用線接続で一体化。高セキュリティかつ高スループット。

⚫️VMware Cloud Console
：VMware Cloud on AWSの管理ポータル。SDDCのデプロイ、設定、監視、ライセンス管理などを行う。

⚫️NSX-T
：マルチクラウド対応のネットワーク仮想化ソリューション。AWS上でVMware Cloudを動かす際のデフォルトネットワーク基盤。




----------------------------------------------------------------------------
✅ 試験や設計上のポイント
既存のVMware環境を変更せずにクラウド移行したい場合は最適解

アプリやOSを変更せずにそのまま移行可能（リフト＆シフト）

AWSのネイティブサービス（S3、RDS、CloudWatchなど）と併用できる

ネットワーク通信はENI経由でAWS VPCとシームレスに連携

運用管理やセキュリティの**責任分界（VMware vs AWS）**も理解が必要

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
AWS上にESXiを個別に立てるサービス	❌ VMwareがAWSインフラ上にフル管理のSDDCを提供するサービス
既存VMをCloudFormationで管理できる	❌ VMware VMはCloudFormationでは管理できない（vCenterで操作）
すべてのAWSリージョンで使える	❌ 提供リージョンは限定されており、東京リージョンは対応済み（要確認）

🌍 ユースケース例
オンプレVMの段階的なクラウド移行（vMotion）

金融・医療などでアプリ改修なしのクラウド導入

VMware運用ノウハウを活かしたハイブリッド運用

クラウドネイティブサービス（S3やAthena）との連携分析
----------------------------------------------------------------------------

┌──────────── AWS ─────────────┐
│                              │
│    VMware Cloud on AWS       │
│    ┌──────────────┐        │
│    │ vSphere / vSAN / NSX │        │
│    │ ESXiホスト（SDDC）   │        │
│    └──────────────┘        │
│          │                        │
│          ▼ ENI（専用通信）         │
│     ┌────────────┐     │
│     │   AWS VPC（EC2 / S3 etc） │     │
│     └────────────┘     │
└────────────────────────┘

（オンプレ）
┌────────────┐
│ vCenter / ESXi        │
└────────────┘
        ▲
        │ Hybrid Linked Mode / HCX
        ▼
（統合管理・移行）




/****************** 2-5-4 AWS Wavelength ********************/
 AWS Wavelength 周辺の主要用語と解説
⚫️AWS Wavelength
：5Gネットワークの通信事業者のデータセンターにAWSのコンピューティング機能を直接配置し、超低遅延のアプリケーションを実現するサービス。AR/VR・ゲーミング・自動運転などに最適。

⚫️Wavelength Zone（WLZ）
：通信事業者の5Gネットワークに組み込まれたAWSのインフラ拠点。AWSリージョンと同様に、独自のアベイラビリティゾーンとして扱われる。

⚫️Wavelength Application
：Wavelength上で稼働するアプリケーション。EC2、EBS、VPC、ENIなどのAWSリソースが使えるが、一部サービス（RDSなど）は非対応。

⚫️超低遅延アプリケーション
：モバイルユーザーとの距離を最短化し、1桁ミリ秒のレイテンシーで動作するアプリ。AR/VR、ライブ映像処理、IoT、ドローン制御などが代表例。

⚫️通信事業者（キャリア）連携
：Wavelengthは通信会社（例：KDDI、Verizon、Vodafoneなど）との共同構築により提供される。通信網内にAWSインフラを配置。

⚫️トラフィックブレイクアウト（Traffic Breakout）
：5Gネットワークから直接Wavelength Zoneにルーティングされる通信。インターネットやAWSリージョンを介さず、即時アクセス可能。

⚫️Carrier Gateway（通信事業者ゲートウェイ）
：Wavelength Zoneとユーザー端末との通信を橋渡しする仮想ゲートウェイ。VPCから5Gネットワークへの出口。

⚫️VPC in Wavelength Zone
：Wavelengthでは、AWSリージョン内にあるVPCの一部としてWavelength Zone用のサブネットを作成し、アプリを配置する。

⚫️Elastic IP（Wavelength専用）
：Wavelength Zoneで使われるグローバルIPアドレス。Carrier Gateway経由で割り当て可能。

⚫️AWS Regionとの連携
：WavelengthはストレージやデータベースをAWSリージョンで保持し、処理はWLZで行う分散設計が可能。

⚫️ユースケース（代表的な用途）
：AR/VR、スマートシティ、自動運転支援、ゲームストリーミング、ドローン制御、映像解析など。「即時反応」が必要な処理に特化。



----------------------------------------------------------------------------
✅ 試験・設計でのポイント
Wavelength は エッジコンピューティングの一種（ユーザーの近くで処理）

使用できるリソースはEC2 / EBS / VPC / ENIが中心

RDS や S3 などの一部マネージドサービスは AWSリージョンで補完

5Gネットワークからの直接アクセスで 低遅延と高帯域を実現

通信事業者との 物理的接続拠点でしか利用できない

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Wavelength は全リージョンで使える	❌ 通信事業者のネットワーク拠点（東京、大阪、海外数拠点など）でのみ提供
Lambda や RDS も使える	❌ Wavelength内では一部サービスのみ利用可能（主に EC2/EBS）
Wavelength でストレージ処理も完結できる	❌ ストレージは AWS リージョンで補完（例：S3、RDS は不可）


🌍 実際の活用例
KDDI × AWS（東京・大阪）：自動運転支援、スマート工場向けアプリに導入

Verizon（米国）：AR遠隔診療、ライブVR中継に利用

Vodafone（欧州）：スマート交通・緊急通信ネットワークに活用
----------------------------------------------------------------------------

【モバイルユーザー】
       ▼
 [5Gネットワーク]
       ▼
 ┌────────────┐
 │ Wavelength Zone       │ ← 通信会社のデータセンター内
 │ ┌────────────────┐ │
 │ │ EC2 / EBS / VPC         │ │ ← 超低遅延アプリをここで稼働
 │ └────────────────┘ │
 │     ▲        ▲         │
 │     │        │Carrier Gateway
 │     │        ▼
 │ AWS Region（S3 / RDS / CloudWatch など）
 └────────────┘







