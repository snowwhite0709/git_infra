【AWS】5．セキュリティ、アイデンティティ、コンプライアンス


/****************** 5-2 AWS Identity and Access Management(IAM) ********************/
 AWS IAM 周辺の主要用語と解説
⚫️AWS Identity and Access Management（IAM）
：AWSにおけるアクセス制御と認証の中心機能。誰が、何に、どんな操作をできるかを細かく制御可能。無料サービスとしてすべてのAWSアカウントに含まれる。

👤 基本構成とエンティティ
⚫️IAMユーザー（User）
：個人やアプリケーションなどがAWSにログインまたはAPI操作するためのエンティティ。アクセスキーやパスワードを持つ。

⚫️IAMグループ（Group）
：複数のIAMユーザーをまとめて共通のポリシーを割り当てるための単位。グループ自体に権限を設定。

⚫️IAMロール（Role）
：一時的にAWSリソースへのアクセス権限を付与できるエンティティ。ユーザー、サービス、外部IDプロバイダなどに割り当て可能。

⚫️エンティティ（Entity）
：IAMで制御対象となる「ユーザー」「ロール」「サービス」などをまとめてこう呼ぶ。

📜 ポリシーとアクセス制御
⚫️ポリシー（Policy）
：アクセスを許可／拒否するJSON形式の設定ファイル。基本構成：

json
コードをコピーする
{
  "Effect": "Allow",
  "Action": "s3:GetObject",
  "Resource": "arn:aws:s3:::example-bucket/*"
}
⚫️インラインポリシー
：個別のユーザー／グループ／ロールに直接埋め込むポリシー。使い回し不可。

⚫️管理ポリシー（マネージドポリシー）
：再利用可能なポリシー。AWSが提供する「AWS管理ポリシー」と、ユーザーが作る「カスタマー管理ポリシー」がある。

⚫️許可（Allow）と拒否（Deny）
：IAMの評価ロジックは「明示的なDenyが最優先」「明示的なAllowがなければアクセス不可」。

🔐 認証とセキュリティ
⚫️MFA（多要素認証）
：パスワードに加え、スマホなどの2段階認証を使うことでセキュリティ強化。重要な操作やルートユーザーに推奨。

⚫️アクセスキー
：プログラムからAPI経由でAWSを操作するための鍵（ID＋シークレット）。漏洩リスクがあるため注意が必要。

⚫️IAMパスワードポリシー
：ユーザーのパスワードに対する最小長、複雑さ、有効期限などの設定ルール。

⚫️ルートユーザー（Root User）
：AWSアカウント作成時に作られる最上位権限のユーザー。普段の操作では使用しないのが推奨。

🌐 ロールの用途と拡張
⚫️EC2ロール
：EC2インスタンスに付与するIAMロール。アプリからS3やDynamoDBに安全にアクセス可能。

⚫️サービスロール（Service Role）
：AWSのサービス（例：Lambda、RDS、ECSなど）がAWS内のリソースへアクセスするために使用するロール。

⚫️信頼ポリシー（Trust Policy）
：ロールを**誰が引き受けることができるか（assume）**を定義する設定。STSで使用。

⚫️外部IDプロバイダ連携（IdP連携）
：SAML2.0やOIDC対応で、会社のADやGoogleアカウントを使ってAWSログイン可能。






----------------------------------------------------------------------------
✅ 試験・設計でのポイント
**最小権限の原則（Least Privilege）**を守ることが基本方針

IAMロールはユーザー・サービス・アカウント間連携すべてで重要

ポリシーのAction・Resource・Condition の理解が重要

ルートユーザーの使用は最小限に、MFAを必ず設定

IAM Access Analyzer や IAM Policy Simulator で権限確認・デバッグ可能

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
IAMユーザーを1人に1つ作れば安心	❌ 可能な限りロール＋一時的認証に移行すべき
ロールはEC2専用の機能	❌ Lambda / ECS / Step Functions など多くのAWSサービスがロール使用
すべてのポリシーは許可が優先される	❌ 明示的なDenyが常に最優先される

🌍 ユースケース例
部署や職種ごとにIAMグループを作成してアクセス制御

EC2アプリケーションにロールを付与してS3から安全にファイル取得

外部企業がS3を使うときにクロスアカウントロールで制限付きアクセス

AWS Organizations + SCP で全体のガバナンスを強化

----------------------------------------------------------------------------

       [IAMユーザーA] ─┐
                      ├─ GroupA（開発者用） ─┐
       [IAMユーザーB] ─┘                    │
                                            ▼
                                        Managed Policy
                                            │
              ┌────────────────────────────────────────┐
              │ s3:ListBucket on arn:aws:s3:::my-bucket │
              └────────────────────────────────────────┘



/****************** 5-3 AWS Single Sign-On ********************/
AWS IAM Identity Center（旧AWS SSO）周辺の主要用語と解説
⚫️AWS IAM Identity Center（旧AWS Single Sign-On）
：複数のAWSアカウントや外部アプリケーションへのアクセスを一元的に管理・制御できる認証基盤。
社内のIDプロバイダ（AD、Azure AD、Google Workspaceなど）と連携し、**シングルサインオン（SSO）**で統合的なアクセス管理が可能。

👥 ユーザー管理と認証基盤
⚫️シングルサインオン（SSO）
：1回のログインで複数のシステムにアクセスできる仕組み。AWS IAM Identity Centerはこれを提供する。

⚫️Identity Center ディレクトリ
：ユーザーやグループ情報を管理するためのユーザーストア（内部または外部）。以下の接続方式に対応：

AWS IAM Identity Center 内部ディレクトリ（ユーザーを直接作成）

Active Directory（AD）（AWS Directory Service経由）

外部IdP連携（SAML 2.0）（例：Azure AD, Okta, Google Workspace）

⚫️フェデレーション（Federation）
：社内のIDでAWSにログインできるようにする仕組み。SSOにおける基盤。

🛡️ アクセス制御とポリシー管理
⚫️アカウントアクセス権限セット（Permission Set）
：SSOユーザーが各AWSアカウントで使うIAMロール相当の権限テンプレート。各アカウントに自動的にロールとして作成される。

⚫️AWS Organizationsとの統合
：複数アカウントを一括で管理している場合、SSOの管理を中央集権化できる。

⚫️IAMロールとの違い
：IAMロールはAWSアカウント内の個別設定だが、IAM Identity Centerはマルチアカウントに統一的なアクセス制御を可能にする。

🌐 利用パターンと統合先
⚫️AWS Management ConsoleへのSSOログイン
：ユーザーは個別のIAMアカウントを持たずに、ポータルからAWSにログイン可能。

⚫️SAML対応の外部アプリケーションへのSSO
：Salesforce、Google Workspace、Boxなど、SAML 2.0対応のSaaSにもSSOでログイン可能。

⚫️CLI / SDKアクセス
：aws sso loginコマンドでCLI経由のアクセスもSSO連携が可能。アクセスキーを使わずに認証できる。

🛠️ その他の特徴と機能
⚫️多要素認証（MFA）対応
：MFAポリシーを強制可能。ユーザーごと、または全体で有効化。

⚫️監査ログ（CloudTrail対応）
：SSOのログイン／操作はCloudTrailで記録可能。セキュリティ監査に活用。

⚫️セッション制御
：**ログインセッションの有効期間（例：1時間など）**を細かく設定可能。

⚫️SCIM連携（自動プロビジョニング）
：IdPからユーザーやグループを自動的に作成・削除・同期するためのプロトコル。


----------------------------------------------------------------------------

✅ 試験・設計でのポイント
IAM Identity CenterはIAMの拡張ではなく、認証統合の基盤

マルチアカウント環境（Organizations）と組み合わせると真価を発揮

内部ID管理 or 外部IdP連携どちらにも対応

ポリシー＝「Permission Set」 → IAMロールとしてアカウント側に展開

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
IAMと同じ機能でSSOできる	❌ IAMは基本ロール・ユーザー単位、Identity CenterはSSOとID連携に特化
1つのアカウントにしか使えない	❌ AWS Organizationsと統合すれば全アカウント一括で管理可能
IAMユーザーでもSSOできる	❌ IAM Identity CenterはIAMユーザーとは別のID管理モデル

🌍 ユースケース例
複数AWSアカウントを1つのID（Google/AD）でSSO管理

開発者と管理者で異なる権限セットを使い分け

SalesforceやBoxなど外部SaaSとSSO統合

AWS CLIを使う開発者に対してアクセスキーを渡さず安全に認証

----------------------------------------------------------------------------


[社内ID（AD / AzureAD / Google）]
           │（SAML連携）
           ▼
 [AWS IAM Identity Center]
           │
  ┌────────────────────────────┐
  │ AWSアカウントA            │
  │ └── IAMロール（権限セット） │
  │ AWSアカウントB            │
  │ └── IAMロール（権限セット） │
  └────────────────────────────┘
           │
       ユーザーはポータルからSSO




/****************** 5-4 AWS Directory Service ********************/
 AWS Directory Service 周辺の主要用語と解説
⚫️AWS Directory Service
：AWS上でMicrosoft Active Directory（AD）互換のディレクトリサービスを提供するマネージドサービス。ユーザーやグループの管理、SSO、ポリシー適用、EC2ドメイン参加などに利用。

🧩 提供される主なディレクトリタイプ
⚫️AWS Managed Microsoft AD（エンタープライズ向け）
：フル機能のMicrosoft Active DirectoryをAWSがマネージドで提供。グループポリシー、Kerberos認証、LDAPS など全機能に対応。企業内ADの拡張や移行に最適。

⚫️AD Connector
：オンプレミスADとAWSを橋渡し（プロキシ）するための接続サービス。AD自体はAWSに作らず、オンプレADをそのまま使い続けたい場合に有効。

⚫️Simple AD
：軽量なAD互換ディレクトリ。低コストで基本的なユーザー／グループ認証を提供。小規模・開発環境向け。Kerberos や信頼関係機能は制限あり。

👤 ディレクトリの用途と連携先
⚫️ドメイン参加（Domain Join）
：WindowsベースのEC2インスタンスをドメインに参加させてグループポリシーやSSOを適用可能にする。

⚫️IAM Identity Center（旧SSO）との統合
：Active Directoryのユーザー／グループをシングルサインオン（SSO）に利用可能。

⚫️WorkSpaces / WorkDocs との連携
：AWSの仮想デスクトップやドキュメントサービスで、ユーザー認証・制御にADが使える。

⚫️グループポリシー（GPO）
：Windows環境でのポリシー管理機能。AWS Managed Microsoft ADではGPOがフルサポートされている。

🔐 セキュリティ・運用関連
⚫️信頼関係（Trust Relationship）
：オンプレADとAWS Managed Microsoft ADの間に双方向・片方向の信頼関係を構築可能。認証の一元化が可能。

⚫️LDAPS（LDAP over SSL）
：ユーザー認証やディレクトリ問い合わせを暗号化通信で行うプロトコル。AD Connector でもサポート。

⚫️ログ管理（CloudWatch連携）
：ディレクトリのログやイベントはCloudWatch LogsやCloudTrailで監視・記録可能。

⚫️冗長性と自動修復
：複数AZに自動的に複製されるため、可用性・耐障害性が高い。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
ドメイン参加やユーザー認証が必要なWindows系アプリケーションにADが有効

オンプレADをそのまま使いたい：AD Connector

AWS上にフル機能ADを展開：AWS Managed Microsoft AD

小規模開発・検証：Simple AD

IAM Identity Center と連携して SSO統合が可能

WorkSpaces（仮想デスクトップ）や WorkDocs との連携によく出題される

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
AD Connector もADをホストしている	❌ AD Connector は単なるリレー／プロキシで、AD自体はオンプレにある必要がある
Simple AD はすべてのAD機能が使える	❌ 機能は限定的。Kerberos信頼関係・GPO連携などは不可
IAMとDirectory Serviceは同じ認証機構	❌ IAMはAWSリソース用、Directory ServiceはWindows/アプリ用の認証基盤

🌍 ユースケース例
Windows Server アプリをEC2上で動かす → ドメイン参加＋GPO適用

社内ADのユーザーでAWS SSOにログインしたい → AD Connector連携

小規模検証環境で簡易ADが必要 → Simple AD

WorkSpaces仮想デスクトップで社内IDで認証 → AWS Managed Microsoft AD

----------------------------------------------------------------------------

  [オンプレAD] ←→ [AD Connector] ←→ [EC2, IAM Identity Center]
                               ↑
                AWS Managed Microsoft AD（フル機能AD）
                               ↑
             WorkSpaces / EC2 ドメイン参加 / SSO




/****************** 5-5 AWS Key Management Service(AWS KMS) ********************/
AWS Key Management Service（KMS）周辺の主要用語と解説
⚫️AWS Key Management Service（KMS）
：AWSが提供する暗号鍵の生成・管理・使用を安全に行うフルマネージドサービス。データの暗号化・復号に使う鍵（KMSキー）を一元管理でき、多くのAWSサービスと統合されている。

🗝️ 暗号鍵の基本用語
⚫️KMSキー（CMK：Customer Master Key）
：KMSで作成・管理される暗号鍵。現在は「KMSキー」と呼ばれる。暗号化・復号に使う中心的存在。
タイプは2つ：

対称キー（通常）：1つの鍵で暗号化／復号（ほとんどのサービスと統合）

非対称キー：公開鍵／秘密鍵ペアで暗号・署名が可能

⚫️キーID／エイリアス（Alias）
：KMSキーの識別子。エイリアスはalias/my-keyのようにわかりやすい名前をつけるためのもの。

⚫️データキー（Data Key）
：実際のデータ暗号化に使う一時的な鍵。KMSキーから生成された鍵で、KMS外で使用される（Envelope Encryption）。

🔁 暗号処理の仕組み
⚫️Envelope Encryption（包み込み暗号化）
：データを直接KMSキーで暗号化せず、KMSから生成したデータキーで暗号化し、そのデータキーをKMSキーで暗号化する方式。パフォーマンスとセキュリティの両立。

⚫️暗号化（Encrypt）
：KMSキーを使って文字列・バイナリ・ファイルなどを暗号化する操作。KMS API または統合サービス経由で実行。

⚫️復号化（Decrypt）
：暗号化されたデータやデータキーをKMSキーを使って元の形式に戻す処理。

🔐 アクセス管理と制御
⚫️キーポリシー（Key Policy）
：KMSキーに対するアクセス制御のルール（JSON形式）。IAMポリシーとは別に、KMS独自の厳密な制御が可能。

⚫️IAMポリシー（との組み合わせ）
：IAMユーザーやロールに付与される権限。KMSでは通常、キーポリシーとIAMポリシーの両方が必要な場合もある。

⚫️クロスアカウントアクセス
：キーポリシーに他アカウントのIAMを許可すれば、KMSキーを他アカウントからも使用可能。

☁️ サービス連携とユースケース
⚫️KMS統合サービス
：KMSはS3、EBS、RDS、Redshift、Lambda、Secrets Managerなど、多くのAWSサービスとシームレスに連携。

⚫️SSE-KMS（Server-Side Encryption – KMS）
：S3やEBSなどがサーバー側でデータをKMSキーで自動的に暗号化する方式。

⚫️Client-Side Encryption（クライアント側暗号化）
：アプリケーション側でKMSキーを使って暗号化し、暗号化済みデータをS3などに保存する方法。

🧪 モニタリング・セキュリティ機能
⚫️CloudTrail連携
：すべてのKMSキー使用操作（Encrypt、Decrypt など）はCloudTrailに記録される。監査ログとして重要。

⚫️自動キーのローテーション
：作成から1年ごとに自動で新しいバージョンのキーに切り替えることが可能（有効化設定が必要）。

⚫️削除保護と待機期間
：KMSキーを削除する際には7〜30日間の待機期間を設定可能。誤削除防止に役立つ。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
KMSキーではなく、生成された「データキー」で実際の暗号処理を行う（Envelope Encryption）

KMSキーにアクセスできるIAM権限＋キーポリシー設定の両方が必要

S3暗号化方式（SSE-S3 / SSE-KMS / SSE-C）の違いがよく出題される

暗号化の統合例（例：RDSの暗号化有無）も要チェック

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
KMSキーで直接データを暗号化する	❌ 通常はデータキーを使って暗号化し、それをKMSキーで保護する（Envelope方式）
IAMポリシーだけでKMSキーが使える	❌ 多くの場合、キーポリシーに明示的な許可も必要
暗号化したS3オブジェクトは他アカウントでも見られる	❌ KMSキーのアクセス権限がなければ、復号化できない

🌍 ユースケース例
S3バケットのアップロードファイルを自動暗号化（SSE-KMS）

EC2上のアプリが暗号化データを扱う → データキーを使った復号処理

複数アカウントで共通のKMSキーを使って安全な連携

RDSやEBSの暗号化設定（暗号化された状態でスナップショットも）

----------------------------------------------------------------------------

           ┌──────────────┐
           │ AWS KMSキー（CMK）│
           └──────────────┘
                    │
        ┌─────────────────────┐
        │ 生成されたデータキー（Data Key） │
        └─────────────────────┘
                    │
     ┌────────────────────────────┐
     │ アプリ or S3 / RDS などでデータを暗号化 │
     └────────────────────────────┘




/****************** 5-6 Amazon Cognito  ********************/
 Amazon Cognito 周辺の主要用語と解説
⚫️Amazon Cognito
：AWSが提供するユーザー認証・ユーザー管理・アクセス制御のためのマネージドサービス。
Webアプリやモバイルアプリにログイン機能を組み込むときに便利。サインアップ／サインイン、SNSログイン、MFAなどに対応。

🧩 基本構成
⚫️ユーザープール（User Pool）
：ユーザーID・パスワードなどを保存・認証するCognitoのID管理機能。アプリにログイン機能を提供。

Eメール・電話番号・ユーザー名などでサインアップ／サインイン

パスワードポリシーやMFA（多要素認証）対応

ログイン成功時にJWT（IDトークン、アクセストークンなど）を発行

⚫️IDプール（Identity Pool）
：AWSリソースへのアクセスを一時的な認証情報で付与する仕組み。
→ ユーザーにIAMロールを割り当てて、S3やDynamoDBへのアクセスを可能にする

⚫️認証フロー
：ユーザーがログインすると、トークンが発行され、それを用いてアクセス管理を実施。IDプールと組み合わせると、トークン→AWS一時クレデンシャル変換が可能。

🔐 認証・認可
⚫️OpenID Connect（OIDC）
：CognitoはOIDC準拠。サードパーティーとのトークン連携やSSO連携も可能。

⚫️ソーシャルログイン
：Google、Facebook、Apple、Amazonなどのアカウントでログインが可能。ID連携によってCognitoユーザーとして扱う。

⚫️SAML 2.0連携
：企業のADやAzure ADなどとSAML認証を使ったフェデレーションが可能。IDプールに連携。

⚫️トークンの種類

IDトークン：ユーザー情報を含むJWT

アクセストークン：APIへのアクセス権を示す

リフレッシュトークン：長期セッション維持用（新しいトークン取得に使用）

🔧 カスタマイズと拡張
⚫️トリガー（Lambda Trigger）
：ユーザーの登録／ログインなどのイベントに応じて、Lambda関数で処理を追加できる。

例：

サインアップ時にカスタムバリデーションを行う

サインイン後に属性を自動設定する

⚫️カスタム属性
：ユーザーに独自の属性（誕生日、ランクなど）を追加可能。

⚫️ホスト型UI / カスタムUI
：Cognitoが提供するサインインページ付きUIを使うか、SDKを使って完全な独自画面を作成可能。

☁️ AWSサービスとの連携
⚫️API Gateway ＋ Cognito User Pool 認証
：APIのエンドポイントをCognitoの認証トークンで保護可能。アクセストークンで検証。

⚫️Cognito Identity Pool + IAMロール
：ログイン後のユーザーに一時的なIAMロールを割り当ててAWSリソースアクセスができる。

⚫️Amplify連携
：AWS AmplifyでCognitoと簡単に連携したログイン機能を構築可能。フロントエンド開発に便利。



----------------------------------------------------------------------------

✅ 試験・設計でのポイント
User Pool：ユーザー認証、トークン発行

Identity Pool：一時的なAWSアクセス権限付与

User PoolだけではAWSリソースアクセスはできない（Identity Poolが必要）

API Gatewayの保護にはUser Poolトークンを利用できる

トリガーで独自処理を差し込めることもよく出る

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
User PoolだけでS3アクセスできる	❌ User Poolは認証だけ。S3アクセスにはIdentity PoolでIAMロールを取得する必要がある
認証トークン＝IAM認証情報	❌ トークンはアプリ内の認証用で、AWS操作にはSTS経由のクレデンシャルが必要
ログインユーザー情報は変更不可	❌ Lambdaトリガーを使って属性の変更・付加が可能


🌍 ユースケース例
スマホアプリのユーザー管理とログイン認証機能（AmplifyやFlutter連携）

API Gatewayと組み合わせて認証付きREST API提供

Googleログイン連携で社外ユーザーをCognito経由で管理

マルチテナントSaaSアプリでテナント別にIAMロールを発行しS3アクセス制御

----------------------------------------------------------------------------


       [ユーザー]
           │
     ┌────────────┐
     │ Cognito User Pool │ ← ユーザー認証
     └────────────┘
           │
     ┌────────────┐
     │  トークン発行（ID/Access） │
     └────────────┘
           │
     ┌────────────┐
     │ Cognito Identity Pool │ ← ロールマッピング
     └────────────┘
           │
     [AWSリソース（S3, DynamoDBなど）]



/****************** 5-7 Amazon Detective ********************/
Amazon Detective 周辺の主要用語と解説
⚫️Amazon Detective
：AWSが提供するセキュリティインシデントの調査と根本原因分析を支援するマネージドサービス。
GuardDuty、CloudTrail、VPC Flow Logsなどのデータを自動で分析・可視化し、不審な挙動の原因特定を支援。

🧠 基本機能と目的
⚫️セキュリティ調査支援ツール
：疑わしい挙動（例：不審なAPI呼び出し、異常なトラフィック）が検出されたときに、そのユーザーやIP、リソースの関連アクティビティを時系列で把握できる。

⚫️根本原因分析（Root Cause Analysis）
：単なる「アラート通知」ではなく、「なぜこのイベントが起きたか？」を調査・可視化するためのサービス。

🔁 連携サービスとデータ元
⚫️Amazon GuardDuty
：脅威検出のトリガーとなるサービス。DetectiveはGuardDutyのアラートを受けて調査を開始できる。

⚫️AWS CloudTrail
：API呼び出しのログ。Detectiveはこれを分析し、「誰が」「いつ」「どこから」「何をしたか」を視覚化。

⚫️VPC Flow Logs
：ネットワークトラフィックの記録。不審な通信先IPや異常な接続頻度の分析に使う。

⚫️Security Hub
：セキュリティ通知の統合ビュー。DetectiveはSecurity Hubとも統合でき、そこから直接分析へジャンプ可能。

🔍 分析と可視化
⚫️エンティティ（Entity）
：Detectiveでは調査対象となる「ユーザー、IAMロール、IPアドレス、EC2インスタンス、VPC」などをエンティティと呼ぶ。

⚫️調査グラフ（Behavior Graph）
：各エンティティに関連する操作・通信・変更を時系列グラフや関連ノードで視覚的に表示。

⚫️異常検出
：GuardDutyの検出やログ情報をもとに、「普段と違う挙動」をハイライト表示する機能もある。

⚙️ 運用と構成
⚫️自動有効化（インジェスト）
：GuardDuty、CloudTrail、VPC Flow Logsを有効化しておけば、Detectiveが自動でデータを取り込み可視化する。

⚫️管理アカウントとメンバーアカウント
：組織（Organizations）で使う場合、管理アカウントでDetectiveを有効化し、他アカウントのデータも集約して調査可能。

⚫️保持期間
：最大 1 年分の調査データを保持できる。ログの長期可視化・調査が可能。





----------------------------------------------------------------------------
✅ 試験・設計でのポイント
GuardDutyが「検出」 → Detectiveが「調査」担当

CloudTrailやFlow Logsを自動で可視化するための強力な分析ツール

Security Hubと組み合わせてセキュリティオペレーションを効率化

手動でのログ分析不要 → ノーコードで深堀り可能

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Detectiveが脅威を検出する	❌ 検出はGuardDutyが行い、Detectiveは原因調査に特化している
ログデータを事前にS3へ保存しないと使えない	❌ S3不要。Detectiveが自動でCloudTrailやFlow Logsからインジェストする
使うには手動でログをアップロードする	❌ 完全自動連携で、手動アップロードは不要

🌍 ユースケース例
GuardDutyで不審なIPからのアクセスが検出 → Detectiveで操作履歴を調査

あるIAMユーザーの異常なS3アクセス頻度を時系列で可視化

脅威通知をSecurity Hubで受信 → クリック1つでDetectiveで詳細分析

複数アカウントのEC2インスタンスに関する異常通信の追跡調査

----------------------------------------------------------------------------

[ GuardDuty ] ──┐
                ▼
         [ Amazon Detective ]
                │
   ┌────────────┬────────────┐
   │ CloudTrail       │ VPC Flow Logs   │
   └────────────┴────────────┘
                │
        [ 調査グラフ / エンティティビュー ]
                │
        ▶ Root Cause, Timeline, Activity




/****************** 5-8 Amazon GuardDuty ********************/

Amazon GuardDuty 周辺の主要用語と解説
⚫️Amazon GuardDuty
：AWSが提供するマネージド型の脅威検出サービス。機械学習や異常検知アルゴリズムを活用し、AWS環境における不正アクセス・不審な通信・不正操作などをリアルタイムで検出する。

🧠 基本機能と目的
⚫️脅威検出（Threat Detection）
：AWSリソース（EC2、IAM、S3 など）に対する不正・異常な動きを自動検出。例：

海外IPからの異常なSSH接続試行

S3バケットへの不正アクセス

EC2がボットネット通信を開始した など

⚫️継続的モニタリング
：CloudTrail、VPC Flow Logs、DNS Logs などをリアルタイムにモニタリングし、分析と検出を自動実行。

📥 データソースと連携
⚫️AWS CloudTrail
：APIコールの記録。不審なIAM操作や異常なAPI使用を検出。

⚫️VPC Flow Logs
：インスタンスのネットワーク通信内容を分析して異常な通信先を検出。

⚫️Route 53 DNS Logs
：不審なドメイン名解決リクエスト（例：マルウェアドメイン）を検出。

⚫️Malware Protection（マルウェア保護）
：EBSボリュームをスキャンし、マルウェアの兆候を検出（オプション設定）。

🧩 検出の仕組みと対応
⚫️検出結果（Finding）
：GuardDutyが検出した異常・脅威ごとのレポート。重大度（Low/Medium/High）、対象リソース、説明付き。

⚫️フィード（Threat Intelligence Feeds）
：AWSやサードパーティのブラックリストや脅威情報リストをもとに検出を強化。

⚫️セキュリティハブ連携
：GuardDutyのFindingはSecurity Hubに統合表示可能。対応の一元管理ができる。

⚫️自動対応（オートメーション）
：**EventBridgeとLambda連携により、特定の脅威に自動対処（例：EC2隔離）**が可能。

⚙️ 管理と運用
⚫️管理アカウント（旧マスタ）
：AWS Organizationsを使えば、一元的に複数アカウントのGuardDutyを有効化・管理可能。

⚫️料金体系
：分析対象のログデータ量に応じた従量課金制。CloudTrail、Flow Logs、DNS Logsに対して課金。

⚫️脅威の種類（例）

検出タイプ	例
Recon（偵察）	Port scan / DNS queries
UnauthorizedAccess	Brute force / EC2 role misuse
Trojan	EC2から不審な通信が発生
S3	S3バケットに対する不正API呼び出し


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
GuardDutyは「脅威検出」専門。修復や調査は別サービス（例：Detective、EventBridge）

CloudTrail / VPC Flow Logs / DNS Logs を自動連携

組織全体で一括管理するには Organizations + 管理アカウント が必要

Findingは重大度と説明付きで、対応の優先度判断に使える

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
GuardDutyが自動で攻撃を止めてくれる	❌ 通知まで。アクションは EventBridge + Lambda で構成する必要あり
対象サービスはEC2だけ	❌ IAMやS3の操作、DNSも含む複数のAWSサービスの脅威を検出
導入に複雑な設定が必要	❌ 有効化だけで自動連携・即時検出開始可能

🌍 ユースケース例
海外IPからのEC2 SSHアクセス → GuardDutyで検出し通知 → LambdaでEC2を停止

IAMユーザーによる異常なAPIアクセス → Security Hubにアラート集約

S3バケットが公開された → API使用から異常検出して管理者にアラート

組織アカウント全体の脅威検出を1アカウントで集中管理


----------------------------------------------------------------------------

[ CloudTrail ]   [ VPC Flow Logs ]   [ DNS Logs ]
       │                  │                  │
       └────→ [ Amazon GuardDuty ] ───→ Finding
                                 │
                        ┌────────────┐
                        │ EventBridge│ → Lambda → 通知・隔離など
                        └────────────┘
                                 │
                        （Detective で調査）




/****************** 5-9 Amazon Inspector ********************/

Amazon Inspector 周辺の主要用語と解説
⚫️Amazon Inspector
：AWSが提供する脆弱性スキャンおよびセキュリティ評価のマネージドサービス。EC2インスタンスやECR（コンテナイメージ）に対して、自動でソフトウェアの脆弱性（CVE）や設定不備を検出する。

🔍 機能と目的
⚫️脆弱性検出（Vulnerability Assessment）
：OSパッケージ、ライブラリ、カーネルなどに**既知の脆弱性（CVE）**があるかをスキャン。

⚫️継続スキャン（自動モニタリング）
：対象リソースに変更があったときに自動で再スキャンされる仕組み。手動トリガー不要。

🧩 スキャン対象と統合サービス
⚫️EC2インスタンス
：OSレベルの脆弱性をスキャン。Inspector エージェント（SSM）経由で自動的に実行される。

⚫️ECR（Amazon Elastic Container Registry）
：コンテナイメージの脆弱性をスキャン。イメージPush時や定期的に自動スキャンが実行される。

⚫️Systems Manager（SSM）との統合
：EC2にSSM Agentがインストールされていれば、Inspectorの導入は完全自動化される。

⚫️Organizations統合
：複数AWSアカウントのInspectorスキャンを集中管理可能。Security Hubとの連携にも対応。

📋 スキャン結果と管理
⚫️Finding（検出結果）
：Inspectorによるスキャン結果。各項目に対し：

CVE番号

重大度（High / Medium / Low / Informational）

影響を受けるリソース（EC2 / イメージ）

修復方法のガイド

⚫️スコアリング（CVSS）
：脆弱性の深刻度はCVSS（Common Vulnerability Scoring System）スコアで表示される。

⚫️自動評価ポリシー
：Inspectorでは全スキャン対象（EC2 / ECR）を自動で検出・管理対象とするポリシーが用意されている。

🔐 セキュリティ管理と連携
⚫️Security Hubとの統合
：InspectorのFindingはSecurity Hubに送られ、他のセキュリティイベントと一元管理可能。

⚫️EventBridge連携
：**脆弱性検出時に通知・自動対処（例：Slack通知やパッチ適用）**を構成可能。

⚫️IAMロール（サービスリンクロール）
：Inspectorには必要なアクセス権限が自動で設定されるサービスリンクロールがあるため、権限管理も簡易。




----------------------------------------------------------------------------

✅ 試験・設計でのポイント
Amazon Inspector = EC2 / ECR の脆弱性診断ツール

スキャンは変更をトリガーにして自動で再実行される（継続モニタリング）

SSM Agentが入っていればエージェントレスで自動適用

Security HubやEventBridgeと連携して通知／対処を自動化できる

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
手動で毎回スキャンしないとダメ	❌ Inspectorは自動でスキャンを継続し、変更時に再実行される
SSMを使って手動設定が必要	❌ SSM Agentが入っていればInspectorは自動で対応
コンテナのスキャンは非対応	❌ ECRのPushや定期チェックでコンテナイメージも対応

🌍 ユースケース例
EC2に自動でInspectorを導入して常時脆弱性監視

ECRにPushされたコンテナイメージを自動でスキャンし、開発前に脆弱性排除

Security Hub + EventBridgeで、HighスコアのFindingが出たら自動通知＆パッチ適用

組織全体で脆弱性の検出状況を可視化し、コンプライアンス対応


----------------------------------------------------------------------------
[ EC2 / ECR イメージ ]
       │
       ▼
[ Amazon Inspector ]
       │
    Finding（CVE一覧、スコア、修復情報）
       │
 ┌───────────────┐
 │ Security Hub / EventBridge │
 └───────────────┘
       ▼
  通知・対処・分析




/****************** 5-10 AWS WAF ********************/
AWS WAF 周辺の主要用語と解説
⚫️AWS WAF（Web Application Firewall）
：AWSが提供するWebアプリケーションを悪意あるアクセスから保護するマネージド型ファイアウォール。
SQLインジェクション、クロスサイトスクリプティング（XSS）、ボット、IP制限などをルールベースで制御できる。

🧱 基本構成
⚫️Web ACL（Access Control List）
：WAFの中心的な構成単位。複数のルール（ルールセット）をまとめて定義し、ALBやAPI Gatewayなどに適用する。

⚫️ルール（Rule）
：Webリクエストに対して許可 / 拒否 / カウントする条件を定義する設定単位。1つのWeb ACLに複数ルールを登録可能。

⚫️ルールグループ（Rule Group）
：複数のルールをひとまとめにして再利用できる単位。
→ 自作 or AWS Managed Rules どちらも可能。

⚫️アクション（Action）
：ルールが一致したときの処理動作。主に以下の3つ：

Allow（許可）

Block（拒否）

Count（ログだけ取る）

📋 ルールの種類と特徴
⚫️条件ルールの例

ルールタイプ	説明
IPセット	特定のIPまたはCIDRブロックを許可／拒否する
文字列一致（String Match）	クエリパラメータやヘッダーに特定の文字列が含まれているか
サイズ制限（Size Constraint）	リクエスト全体や特定パートの長さ制限
正規表現（Regex Match）	複雑なパターン条件の指定が可能
レートベースルール（Rate-based Rule）	一定時間内のリクエスト回数に基づくブロック（DoS緩和）
⚫️AWS Managed Rules
：AWSが提供する一般的な攻撃対策済みルールセット（例：SQLi対策、XSS対策、IP Reputationなど）。
→ 運用負荷を減らしながら高精度の防御が可能。

🔗 適用対象サービス
AWS WAFは以下のサービスにアタッチ可能：

Amazon CloudFront（グローバル分散CDN）

Application Load Balancer（ALB）

Amazon API Gateway（REST / HTTP API）

AWS App Runner（2024年以降対応）

Amazon Verified Access（ゼロトラスト適用先）

📊 可視化・モニタリング
⚫️WAFログ（Kinesis Data Firehose + S3）
：リクエストごとのルール判定結果をS3やCloudWatch Logsに出力可能。Athenaで分析もできる。

⚫️CloudWatchメトリクス
：ルール別のヒット回数や、ブロック数などを可視化。アラーム設定にも活用可能。



----------------------------------------------------------------------------

✅ 試験・設計でのポイント
WAFはレイヤー7（アプリケーション層）の防御

Web ACL にルールを設定 → ALB / API Gateway / CloudFront に適用

マネージドルールでSQLi / XSS 対策を手軽に導入

レート制限（Rate-based Rule）で簡易DDoS対策も可能

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
WAFは自動ですべての攻撃を防ぐ	❌ ルールを定義・適用しなければ動作しない（初期状態では何も防がない）
WAFはEC2に直接適用できる	❌ WAFはALB / API Gateway / CloudFront にアタッチする
ルールに一致したら常にブロック	❌ Countモードを使えばログのみ取得して挙動確認も可能

🌍 ユースケース例
REST APIに対するXSS / SQLインジェクションのブロック

特定の国・IPからのアクセス制限（IP制御ルール）

1分間に100件以上のPOSTを送ってくるIPを自動ブロック（レートベースルール）

CloudFront + WAF構成でグローバルにアプリ保護


----------------------------------------------------------------------------

[ユーザー] ──→ [CloudFront / ALB / API Gateway]
                    │
               ┌──────────────┐
               │   AWS WAF + Web ACL │
               └──────────────┘
                    │
      ┌─────────────┬─────────────┐
      │ IP制限       │ SQLi対策       │ XSS対策など
      └─────────────┴─────────────┘
                    ▼
               [アプリケーション]




/****************** 5-11 AWS Shield ********************/
AWS Shield 周辺の主要用語と解説
⚫️AWS Shield
：AWSが提供するDDoS（分散型サービス妨害）攻撃からアプリケーションを保護するマネージドサービス。
すべてのAWSユーザーが**標準版（Shield Standard）**を無料で利用可能。有料の Shield Advanced を使うとより高度な保護と対応支援が得られる。

⚙️ サービスレベルの分類
⚫️Shield Standard（無料）
：すべてのAWSサービス利用者に自動適用される基本的なDDoS保護。Layer 3/4（ネットワーク層／トランスポート層）に対応。
例：UDPフラッド、SYNフラッド、リフレクション攻撃など。

⚫️Shield Advanced（有料）
：ミッションクリティカルなシステム向けの強化版DDoS保護サービス。下記の機能が追加される：

アプリケーション層（L7）DDoS対策（WAF連携）

リアルタイム検出と自動緩和（mitigation）

DDoS攻撃時のサポート連携（DDoS Response Team：DRT）

CloudFront、ALB、Global Accelerator、Route 53、Elastic IPなどに対応

DDoS攻撃による料金増加の保護補償（費用保護）

🔍 主な機能・構成要素
⚫️DDoS（分散型サービス妨害）攻撃
：大量のアクセスを意図的に送りつけ、サービスを遅延・停止させる攻撃。

⚫️レイヤー3/4（L3/L4）
：IPやTCP/UDPレベルの攻撃。例：SYNフラッド、UDPフラッドなど
→ Shield Standardで保護対象。

⚫️レイヤー7（L7）
：HTTPリクエストを大量に送信するアプリケーション層の攻撃。
→ Shield Advanced + WAF で防御。

⚫️DRT（DDoS Response Team）
：AWSの専門チーム。Shield Advancedを契約していると、DDoS攻撃発生時に24時間体制で支援を依頼可能。

⚫️費用保護（Attack Cost Protection）
：DDoS攻撃でCloudFrontやALBの料金が急増した場合、補填の申請が可能（Shield Advanced限定）。

🔗 他サービスとの連携
⚫️AWS WAF
：Shield Advancedを使うと、WAFと連携してアプリ層（L7）の攻撃を防御。

⚫️Amazon CloudFront
：Shieldの推奨構成。グローバルに分散したエッジロケーションで攻撃を吸収。

⚫️Route 53 / Global Accelerator
：グローバルサービスに対するDDoS耐性のあるDNSやアプリ配信インフラと統合。

⚫️AWS Firewall Manager
：Shield Advanced + WAFルールの組織全体への一括適用・管理が可能。



----------------------------------------------------------------------------
✅ 試験・設計でのポイント
Shield Standardはすべてのユーザーに無料で自動適用

より高度な対策、サポート、費用保護には Shield Advanced が必要

WAF連携でL7（アプリケーション層）の攻撃にも対応

CloudFront、ALB、Route 53 などに適用できるリソースタイプに注意

DRTへの連絡は Shield Advanced 契約者のみ可能

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Shieldを使うには設定が必要	❌ Shield Standard は自動で有効化されている（手動操作不要）
ShieldだけでL7の攻撃も全部防げる	❌ L7（HTTP系）はWAFと連携したルール設定が必要
ShieldはALBだけの機能	❌ CloudFront、Global Accelerator、Elastic IPなどにも対応

🌍 ユースケース例
海外からのUDPフラッド攻撃を Shield Standard で自動防御

高トラフィックECサイトに Shield Advanced + CloudFront + WAF を適用して包括保護

DDoSでEC2のElastic IPが狙われた → Shield AdvancedでDRTに連携して緩和

攻撃により増加した転送費用を Shield Advanced の補償で申請


----------------------------------------------------------------------------

[ 攻撃者 ]
    │
    ▼
[ CloudFront / ALB / Route 53 ]
    │
┌────────────────────────┐
│       AWS Shield（Standard / Advanced）      │
└────────────────────────┘
    │              ▲
    ▼              │
[ WAF ] ←──── Shield Advanced連携（L7対策）
    │
[ アプリケーション ]





/****************** 5-12 AWS Security Hub ********************/
AWS Security Hub 周辺の主要用語と解説
⚫️AWS Security Hub
：AWSのセキュリティ関連サービスの検出結果（Findings）を集約・可視化・スコアリングする統合セキュリティ管理サービス。
脅威、設定ミス、ベストプラクティス違反などを一元的にダッシュボードで把握し、対応の優先順位を判断できる。

🔍 基本機能と役割
⚫️セキュリティ統合ビュー（Security Posture Dashboard）
：GuardDuty、Inspector、IAM Access Analyzer、Macie、Firewall Manager などのFindingsを統合表示。
→ どのリソースが、どの観点で、どれだけリスクがあるかを見える化。

⚫️CISベンチマーク対応（CIS AWS Foundations Benchmark）
：セキュリティのベストプラクティス（例：S3バケットがパブリックになっていないか）に基づく自動チェック。

⚫️PCI DSS レポート（任意有効化）
：クレジットカード業界のセキュリティ基準に基づいたチェックが可能（監査対応に便利）。

🧠 用語と構成要素
⚫️Finding（検出結果）
：Security Hubが受け取ったセキュリティイベントや評価結果。共通スキーマ（AWS Security Finding Format：ASFF）で統一されている。

⚫️Severity（重大度）
：各Findingに設定される**重大度スコア（LOW／MEDIUM／HIGH／CRITICAL）**により、対応の優先度を判断できる。

⚫️Insight（インサイト）
：特定の条件に合致するFindingを自動的にグルーピングして分析。例：過去7日間にHIGHレベルのFindingが発生したリソース一覧。

⚫️Compliance Status（準拠状況）
：CISやPCI DSSなどセキュリティ基準への適合状態を「PASSED／FAILED」で表示。

🔗 連携できるサービスとパートナー
⚫️AWSサービス連携（代表例）

サービス名	提供するFinding
GuardDuty	脅威検出（異常な通信など）
Inspector	脆弱性スキャン（EC2/ECR）
IAM Access Analyzer	不要なアクセス権の発見
Macie	機密情報の検出（例：S3の個人情報）
Firewall Manager	ポリシー違反など
⚫️サードパーティ統合
：Trend Micro、Palo Alto Networks、CrowdStrike、Splunk などの外部セキュリティツールとも統合可能。一元監視が可能。

⚙️ 管理・運用とアクション
⚫️EventBridge連携
：Finding発生時に自動で通知や対応を実施可能（例：SNS通知、Lambda実行、SecurityチームにSlack通知など）。

⚫️自動アクション（Custom Actions）
：特定のFindingに対してボタン操作で手動対応をトリガーできる。
→ 例：「このEC2を隔離する」「IAMユーザーを無効化する」など。

⚫️組織統合（Organizations連携）
：Security Hubを管理アカウントから全アカウントに有効化・集約表示できる。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
Security Hubは「統合管理」ツール → 検出自体は他のサービスが行う

ASFF（AWS Security Finding Format）でデータを共通化している

CISベンチマーク対応がある（S3の公開、IAM MFAなど）

EventBridgeやCustom Actionsで自動対応の設計が可能

複数アカウント構成ではOrganizations連携で集中管理

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Security Hubが攻撃を防ぐ	❌ Security Hubは可視化と統合管理が目的。検出・対応は他サービスとの連携で実現
個別のサービスからしか見えない	❌ Security HubでGuardDutyやInspectorの結果もまとめて見られる
自動対応はできない	❌ EventBridgeやLambdaで自動修復処理も可能


🌍 ユースケース例
GuardDutyが異常アクセスを検出 → Security Hubで重大度高のFindingとして一覧表示

Inspectorで発見された脆弱性がSecurity Hub上でスコア化され、修復アクションを起動

複数AWSアカウントのセキュリティ状態をまとめて可視化／監査レポートとして出力

CISベンチマークに準拠しているかを毎日チェックして通知

----------------------------------------------------------------------------


[ GuardDuty ]       [ Inspector ]        [ Macie ]
     │                  │                     │
     ▼                  ▼                     ▼
           ┌────────────────────────┐
           │    AWS Security Hub     │
           └────────────────────────┘
                       │
     ┌────────────────────────────┐
     │ Insights / Compliance Reports │
     └────────────────────────────┘
                       │
            ┌────────────────────┐
            │ EventBridge → Lambda│（自動対応）
            └────────────────────┘





/****************** 5-13-1 AWS Certificate Manager(ACM) ********************/

AWS Certificate Manager（ACM）周辺の主要用語と解説
⚫️AWS Certificate Manager（ACM）
：AWSが提供するSSL/TLS証明書の取得・管理・自動更新を行うマネージドサービス。HTTPS 通信に不可欠な証明書を簡単に導入でき、手動更新の負担を軽減。

📜 証明書の基本知識
⚫️SSL/TLS証明書
：通信の暗号化とサーバの正当性を証明するデジタル証明書。WebサイトをHTTPS化するために必要。

⚫️パブリック証明書（Public Certificate）
：ACMが無料で発行できる公開SSL証明書。ACMと連携可能なサービス（例：ELB、CloudFront）で使用可。

⚫️プライベート証明書（Private Certificate）
：社内用など非公開の証明書。ACM Private CA（後述）と組み合わせて発行・管理。

⚫️証明書バインディング
：ALB、CloudFront、API Gatewayなどに証明書を紐づけて HTTPS を有効化する操作。

🔁 発行・更新・検証
⚫️ドメイン検証（Domain Validation）
：証明書を発行する際、そのドメインの所有者であることを証明する方法。ACMでは以下2通りに対応：

DNS検証（推奨）：Route 53などに自動でレコード追加。更新も自動化可能。

Email検証：admin@やhostmaster@などに送られるメールから確認。更新時に再認証が必要。

⚫️自動更新（Auto Renewal）
：ACM発行の証明書は90日間有効で、自動的に更新・適用される（DNS検証が有効な場合）。

⚫️インポート証明書
：他ベンダー（例：Let's Encrypt、DigiCert等）で取得した証明書を手動でACMにアップロードして使用可能。自動更新は非対応。

🔐 セキュリティと管理
⚫️ACM Private CA（Certificate Authority）
：AWSが提供する社内用途向けのプライベート証明書を発行するためのCAサービス。内部サーバーやIoT機器向けに使う。

⚫️KMSとの連携
：証明書と一緒に使用される暗号鍵の保護は、AWS KMSで管理されるセキュリティキーを使用。

⚫️IAMポリシー
：ACMへのアクセス（証明書の取得・一覧取得・削除など）はIAMポリシーで制御可能。

🧩 対応サービスとユースケース
⚫️HTTPSを有効化できる主なサービス

サービス	備考
Application Load Balancer (ALB)	ACM証明書でHTTPSエンドポイント構築
Amazon CloudFront	地域限定だがACM証明書の使用が可能
API Gateway	カスタムドメイン名との併用でHTTPS化
Elastic Beanstalk	ALB経由でHTTPS設定可能
NLB（非対応）	ACM証明書は使えず、手動証明書でTLS設定が必要
⚫️証明書のインポート先
：EC2、オンプレ環境、IoTデバイスなどで、インポートした証明書を利用可能。

----------------------------------------------------------------------------
✅ 試験・設計でのポイント
ACMで取得した証明書は ALB / CloudFront / API Gateway などに自動で適用可能

DNS検証は更新の自動化が可能 → 運用負担を減らす

外部から持ち込んだ証明書は自動更新されない（更新は手動）

内部用途の証明書は ACM Private CA が必要

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
ACM証明書はどこでも使える	❌ ACM発行の証明書は一部のAWSサービス（ALB等）でのみ使用可能
CloudFrontにどのACM証明書でも使える	❌ バージニア北部リージョンの証明書のみ使用可能（特殊仕様）
証明書は自動で配布される	❌ 対象サービスにバインドする必要がある（ALBなどに紐付けて使う）

🌍 ユースケース例
ECサイトをHTTPS化 → ACM + ALBでSSL対応

カスタムドメインを使ったAPI Gateway に HTTPS を適用

社内サーバー認証用にプライベート証明書を発行（ACM Private CA）

証明書更新作業を削減するため、DNS検証で自動更新設定

----------------------------------------------------------------------------

[ ACM 証明書 ]
      ▲
 ┌────────────┐
 │ Route 53 DNS検証 │ ← 所有者確認
 └────────────┘
      │
      ▼
[ ALB / CloudFront / API Gateway ]
      │
   HTTPS（暗号化通信）有効






/****************** 5-13-2 AWS AWS Secrets Manager ********************/

AWS Secrets Manager 周辺の主要用語と解説
⚫️AWS Secrets Manager
：AWSが提供するパスワードやAPIキー、データベース認証情報などの“シークレット”を安全に保存・取得・ローテーションできるマネージドサービス。
セキュリティと運用負荷の両面で重要な、機密情報の管理を自動化する。

🧩 基本機能と用語
⚫️シークレット（Secret）
：Secrets Manager に保存するパスワード、DB認証情報、トークン、APIキーなどの機密情報のこと。
→ 値はJSON形式または単一文字列で格納可能。

⚫️自動ローテーション（Automatic Rotation）
：データベースや認証情報などのパスワードを自動で定期更新し、アプリに通知せずに反映できる機能。Lambda関数を使ってローテーション処理を自動化。

⚫️バージョン管理（Version Staging）
：シークレットには複数のバージョンが保持され、段階的に適用される。
→ AWSCURRENT（最新）、AWSPENDING（検証中）などのステージがある。

☁️ 主なユースケースと連携
⚫️RDS / Aurora との統合
：RDSインスタンスのユーザー名・パスワードを Secrets Manager で一元管理＋自動ローテーション可能。RDS MySQL, PostgreSQL, SQL Serverなどに対応。

⚫️Lambda / ECS / EC2 との統合
：これらのアプリケーションがSecrets ManagerのAPI経由で動的に認証情報を取得可能（例：環境変数ではなくリアルタイム取得）。

⚫️カスタムシークレット
：APIキーやOAuthトークンなど、任意のテキストデータをシークレットとして管理可能。

⚫️SDK/APIからの取得
：Secrets ManagerはCLI / SDK（Java, Python, Go等） / Boto3（Python）などから呼び出して使用可能。

🔐 セキュリティ・制御
⚫️KMSによる暗号化
：保存時のシークレットは AWS KMS で自動的に暗号化され、暗号鍵の管理もIAMで制御可能。

⚫️IAMアクセス制御
：Secrets Manager のシークレットに対して、IAMポリシーで細かい操作権限（読み取り・更新・削除）を制御可能。

⚫️CloudTrailログ連携
：Secrets Managerへのすべての操作（GetSecret、PutSecretなど）はCloudTrailに記録される。監査・追跡可能。



----------------------------------------------------------------------------

✅ 試験・設計でのポイント
Secrets Managerは「機密情報の保存＋ローテーション」機能を備える

環境変数や設定ファイルからの“脱ハードコーディング”に有効

KMSで暗号化されており、IAMでアクセス制御されるためセキュア

ローテーションはRDS / Aurora に標準対応（Lambda連携で自動）

Parameter Store（SSM）との違いもよく出題される

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Secrets Managerを使うと自動で環境変数に反映される	❌ アプリケーション側でAPIやSDKから明示的に取得する必要がある
すべてのデータベースがローテーション対象	❌ 対応しているのは一部（RDS系）。他はLambdaを使って自作ローテーションが必要
Secrets Managerで自動復号されない	❌ アプリがAPIで取得したときには自動で復号済みデータが返る

🌍 ユースケース例
RDSのDB認証情報を Secrets Manager に保存 → 毎月自動でパスワードローテーション

Lambda関数から API キーを Secrets Manager 経由で動的に取得

外部サービスのトークンを Secrets Manager に格納し、SDK経由で参照

CloudTrailで機密情報のアクセス状況を監査


🆚 SSM Parameter Store との違い（よく出題）
特徴	Secrets Manager	SSM Parameter Store（SecureString）
主目的	認証情報やAPIキーなど機密情報の管理	パラメータや設定値の保存
暗号化	✅（KMS）	✅（KMS）
自動ローテーション	✅（対応DB + Lambda）	❌（自動化されていない）
料金	有料（月単位＋呼び出し）	基本無料（一部制限あり）
高度な監査	CloudTrail連携、バージョン対応	CloudTrail対応（限定的）


----------------------------------------------------------------------------

        ┌────────────┐
        │ Secrets Manager │
        └────────────┘
               ▲
     ┌──────────────┐
     │ JSON形式のシークレット │
     └──────────────┘
               │
        KMSで暗号化保管
               │
      ▼                ▼
[ アプリ（Lambda/EC2） ]   [ RDS（自動ローテーション） ]
          │
   API経由で取得（GetSecretValue）





/****************** 5-13-3 AWS Resource Access Manager(AWS RAM) ********************/

 AWS Resource Access Manager（AWS RAM）周辺の主要用語と解説
⚫️AWS Resource Access Manager（AWS RAM）
：AWSアカウント間または組織内でリソースを安全に共有するためのマネージドサービス。
同一リージョン内にある VPCサブネット、Transit Gateway、License Managerなどのリソースを共有可能。

🧩 基本機能と目的
⚫️リソース共有（Resource Sharing）
：複数のAWSアカウントまたは組織単位で、特定のAWSリソースを共同利用できるようにする仕組み。VPCなどを再構築せずに共有可能。

⚫️共有対象アカウント
：共有先は以下のどちらか：

特定のAWSアカウント（個別ID）

AWS OrganizationsのOU（組織単位）

⚫️リージョン制限
：共有対象のリソースは同一リージョン内に存在している必要がある（一部例外あり）。

📦 共有可能な代表的リソース（※試験対策に重要）
リソースタイプ	説明
VPCサブネット	他アカウントのEC2が同じVPCに存在するかのように通信可能
Transit Gateway	複数のVPCやオンプレを一括接続
Route 53 Resolverルール	DNS解決ルールの共有
License Managerライセンス	ライセンスを共有して一元管理
Private Hosted Zone	VPC間でのDNS名前解決の共有
Outposts	一部対応あり（2024年現在）
🧷 主な用語と構成要素
⚫️リソース共有（Resource Share）
：共有設定の単位。1つのリソース共有に複数のリソースと複数の共有先を登録可能。

⚫️受信者アカウント（Participant）
：リソースを共有される側のアカウント。明示的に受け入れを承認する必要がある場合あり。

⚫️Allow external accounts
：組織外のアカウントに共有する場合は、このオプションを明示的に有効化する必要がある。

⚫️タグ共有
：タグベースのアクセス制御にも対応しているため、共有リソースのポリシー制御が可能。

🔐 セキュリティと制御
⚫️IAMポリシーとの併用
：共有されたリソースに対するアクセスは、共有元と共有先のIAMポリシーの両方で制御される。

⚫️CloudTrail連携
：RAMでの共有操作やリソース使用履歴は、CloudTrailで記録・監査可能。

⚫️削除／無効化
：共有元がリソース共有を削除すると、受信側からもアクセスできなくなる。安全性確保に重要。


----------------------------------------------------------------------------

✅ 試験・設計でのポイント
Organizations内の複数アカウントでリソース（VPC等）を再利用できる

Transit Gateway や VPC サブネットの共有が特に頻出

IAMと組み合わせて適切にアクセスを制御する必要あり

「自分が作成したリソースを他のアカウントでも使いたい」というシナリオでRAMを選ぶ

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
RAMで共有すれば自動的に使える	❌ 受信者側の承認や設定が必要な場合がある
RAMでIAMユーザーも共有できる	❌ 共有できるのはインフラ系リソース（VPC, TGWなど）。IAMリソースは共有不可
他リージョン間でも共有できる	❌ 原則、同一リージョン内のリソースに限られる

🌍 ユースケース例
開発・検証・本番アカウントで同じVPC構成を共有して利用

親アカウントでTransit Gatewayを構築 → 子アカウントと共有してVPC間通信

ライセンス（例：SQL Server）の利用を統制し、全社的にLicense Managerと連携して共有管理

DNS解決ルールを複数アカウントに一括適用（Route 53 Resolverルールの共有）

----------------------------------------------------------------------------

[ アカウントA（共有元） ]
        │
  ┌─────────────┐
  │ Resource Share │ ← VPCサブネット, TGW, Route53 など
  └─────────────┘
        │
        ▼
[ アカウントB（共有先） ]
        │
    EC2インスタンス起動
    （共有されたサブネットに配置）




/****************** 5-13-4 AWS Network Firewall  ********************/

AWS Network Firewall 周辺の主要用語と解説
⚫️AWS Network Firewall
：VPC内部のネットワークトラフィックに対して、状態を持ったフィルタリング（ステートフル検査）やパターンマッチングによる保護を提供するマネージド型ファイアウォールサービス。
高度な インバウンド／アウトバウンドトラフィック制御や侵入検知（IDS）・防御（IPS） の機能も備える。

🧱 主な構成要素
⚫️ファイアウォールポリシー（Firewall Policy）
：ルールグループをまとめて適用するテンプレート。1つのファイアウォールに1つのポリシーを適用。

⚫️ルールグループ（Rule Group）
：実際にトラフィック制御を行うルールの集合。以下の2種類がある：

ステートフルルールグループ：接続状態を記憶して、詳細なトラフィック制御を可能にする（例：IPS機能付き）

ステートレスルールグループ：パケット単位での単純なマッチングルール（例：IP/ポート制限）

⚫️ファイアウォール（Firewall）
：VPC内に配置する実体。サブネットに紐付け、VPCトラフィックをルーティングして検査対象にする。

⚫️エンドポイント（Firewall Endpoint）
：ファイアウォールを通過させるための中継ポイント（ENI）。サブネットに自動的に作成される。

🔁 運用・機能
⚫️トラフィック検査対象
：以下の通信を対象にインバウンド／アウトバウンドの制御が可能：

VPC外へのインターネットアクセス

VPC間通信

オンプレミスとのVPN/Direct Connect経由の通信

⚫️ルーティング設定（重要）
：Network Firewallを使うには、ルートテーブルでトラフィックをファイアウォールエンドポイント経由に設定する必要がある。

⚫️ログ出力
：Flow Logs（通信記録）／Alert Logs（検出ログ）をCloudWatch LogsまたはS3へ送信可能。

📋 ルールの種類と例
種類	例
ステートレスルール	送信元IPアドレス = 192.0.2.0/24 をブロック
ステートフルルール	HTTPヘッダーに「X-Bad-Content」が含まれる通信を検出
Suricata互換ルール	オープンソースのIDSルール記述形式に準拠（高度な検出ロジックが記述可能）
🔐 セキュリティ機能
⚫️IPS（侵入防止）機能
：ステートフルルールを使って、攻撃の兆候がある通信を検出・遮断可能。

⚫️DNSフィルタリング
：不審なドメイン名へのアクセスをブロック（DNSクエリに対する制御ルールを記述可）。

⚫️CloudWatch Metrics & Alarms
：ルールのヒット回数やログ情報からCloudWatchメトリクスを生成し、異常検知や自動通知が可能。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
VPC内トラフィックに対するL3～L7レベルのファイアウォール制御ができる唯一のサービス

ルートテーブルで明示的にNetwork Firewall経由にする必要がある

ステートフルとステートレスの使い分けが問われやすい

Suricata互換ルールで高度な検出も実現可能

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
サブネットに置くだけでトラフィックを監視できる	❌ ルートテーブルで明示的にNetwork Firewallのエンドポイントを経由する設定が必要
ステートレスとステートフルは同じ扱い	❌ ステートフルはセッションの文脈を持ち、より詳細な制御が可能
CloudFrontなどにも適用できる	❌ Network FirewallはVPC内のリソース専用（CloudFrontにはWAFを使用）

🌍 ユースケース例
VPCからのインターネットアクセスに対して、許可されたサイトだけをホワイトリスト化

PCI DSS や金融機関向けネットワークでの IDS/IPS機能による通信制御

開発・本番環境間の通信にステートフル検査を入れて、不正な通信経路をブロック

外部送信されるデータをCloudWatchログに記録して不正送信対策

----------------------------------------------------------------------------

[ VPC ]
   │
   ▼
[ サブネット（Firewall用） ]
   │
[ AWS Network Firewall ]
   │
   ▼
[ インターネット / オンプレ / 他VPC ]






/****************** 5-13-5 AWS CloudHSM ********************/

AWS CloudHSM 周辺の主要用語と解説
⚫️AWS CloudHSM
：AWSが提供するFIPS 140-2 レベル3に準拠した、クラウド上のハードウェアセキュリティモジュール（HSM）。
鍵の生成・保管・利用を物理的に隔離されたHSM上で行うことで、高いセキュリティ性と暗号鍵の完全な制御を実現する。

🔍 主な特徴と利用目的
⚫️HSM（Hardware Security Module）
：暗号鍵の生成・保管・利用を物理的に安全な専用デバイス内で行う仕組み。鍵の漏洩リスクを極小化できる。

⚫️FIPS 140-2 Level 3
：米国政府の定める暗号モジュールのセキュリティ標準。CloudHSMはそのレベル3に準拠（高レベル）。

⚫️鍵の所有権はユーザー側
：AWS KMSとは異なり、CloudHSMでは暗号鍵の生成・管理を完全にユーザー自身で行う。AWSも鍵の中身にアクセスできない。

🧩 構成要素と連携
⚫️クラスタ（Cluster）
：CloudHSMの論理的な構成単位。可用性のために複数AZにまたがってHSMを配置可能。

⚫️クライアントライブラリ（CloudHSM Client SDK）
：アプリケーションからHSMにアクセスするためのソフトウェアライブラリ（PKCS#11, JCE, OpenSSL など）。

⚫️セキュリティグループ／ENI
：CloudHSMはVPC内にENI（Elastic Network Interface）を持ち、アプリからはこのENI経由で接続する。

⚫️互換API（PKCS#11 / JCE / CNG）
：様々な暗号ライブラリと連携可能。例：

PKCS#11（多くのセキュリティミドルウェアに対応）

JCE（Java暗号化）

CNG（Windows向け）

🔐 セキュリティと鍵管理
⚫️鍵の生成・保管・削除
：すべてHSMデバイス内で完結。AWSにはアクセス権なし。

⚫️マスター鍵（Customer Master Key）
：CloudHSMで生成・保存する主要な暗号鍵。データキーの暗号化に使用（KMSとは異なり、手動管理が基本）。

⚫️ユーザー管理
：CloudHSM内部にはセキュリティオフィサー、暗号ユーザーなどのロールが存在し、アクセス制御を実施。

⚫️バックアップ
：HSMクラスタのバックアップは自動化されておらず、ユーザーがスナップショットを管理する必要がある。



----------------------------------------------------------------------------

✅ 試験・設計でのポイント
CloudHSMはKMSよりも鍵管理を厳密に制御したい場合に使用

PCI DSS、政府機関、金融などの高セキュリティ用途で採用される

AWS KMSとCloudHSMは連携可能（KMSの鍵をCloudHSM上に配置）

CloudHSMは自動化よりも「制御性の高さ」を重視する場面に適している

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
CloudHSM は KMS の上位互換	❌ KMSは使いやすさ、CloudHSMは完全制御が目的。ユースケースが異なる
AWS が鍵をバックアップしてくれる	❌ CloudHSMでは鍵管理・バックアップはユーザーの責任
CloudHSMを使えば自動で暗号化される	❌ アプリが SDK経由で明示的に暗号化処理を行う 必要がある

🌍 ユースケース例
金融機関が暗号鍵をAWSに預けず、自身で厳密に管理したい場合

政府・医療・研究機関などでFIPS 140-2 Level 3準拠が求められる場合

カスタム暗号アルゴリズムやデジタル署名の実装が必要な業務

AWS KMS の CMK（顧客管理キー）を CloudHSM にホストする構成


----------------------------------------------------------------------------

[ アプリケーション（EC2など） ]
         │
   CloudHSM SDK（PKCS#11, JCE）
         │
   ┌───────────────────────┐
   │   AWS CloudHSM Cluster（複数AZ配置） │
   └───────────────────────┘
         │
     鍵の生成・署名・復号（デバイス内）




/****************** 5-13-6 AWS Artifact ********************/

AWS Artifact 周辺の主要用語と解説
⚫️AWS Artifact
：AWSが提供するセキュリティ・コンプライアンスに関する監査レポートや証明書を提供するマネージドサービス。
ISO、SOC、PCI DSS など、第三者による監査証明書をオンデマンドでダウンロード可能。

📑 提供される文書と種類
⚫️監査レポート（Audit Reports）
：第三者機関によるAWSのセキュリティ・運用体制の評価結果を示す文書。例：

SOC 1 / SOC 2 / SOC 3 レポート

ISO 27001、ISO 27017、ISO 27018 認証証明書

PCI DSS コンプライアンス証明

⚫️コンプライアンスパッケージ（Agreements）
：特定の業種・地域に対応する契約テンプレートや同意書。例：

HIPAA BAA（医療情報に関する契約）

GDPR DPA（欧州向けデータ保護規約）

⚫️利用契約証明（Customer Agreement）
：AWSサービスを使う上での法的同意確認や規制順守の証明に使える資料。

⚙️ 主な機能と用途
⚫️ダウンロード形式
：Artifactにアクセスすれば、PDF形式で監査レポートを即座にダウンロード可能（AWSマネジメントコンソールからアクセス）。

⚫️法務・監査・取引先提出に有効
：コンプライアンス部門や監査担当者が社内監査・第三者提出・顧客向け説明資料として活用できる。

⚫️毎年更新（自動通知可）
：ISOやSOCレポートは年1回更新される。AWSは更新通知も提供しており、監査証明の最新状態を維持しやすい。

🔐 セキュリティとアクセス制御
⚫️IAM制御
：Artifact自体の閲覧・ダウンロード操作はIAMポリシーでアクセス制御可能。最小権限の原則で制御するのが推奨。

⚫️マネジメントコンソールからアクセス
：CLIやAPIは非対応（2025年時点）。Webコンソールからのみ利用可能。

⚫️ドキュメントの保持・証跡
：ダウンロード後はCloudTrailには記録されないため、別途ダウンロード日時などを社内で記録するのがベストプラクティス。



----------------------------------------------------------------------------

✅ 試験・設計でのポイント
Artifactは「監査証明書の閲覧・取得サービス」

セキュリティ制御や暗号化ではなく、規制対応に関する文書提供が目的

SOCレポートやISO証明を必要とする業種（金融・医療・公共）では重要

APIアクセスは不可、マネジメントコンソールからのみ操作

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Artifactを使うとシステムに自動的に監査ルールが適用される	❌ Artifactは文書提供のみ。監査そのものの設定は別のサービスで行う（例：Config、CloudTrail）
CLIやSDKでレポートを取得できる	❌ Artifactはマネジメントコンソール限定操作
全ユーザーがアクセスできる	❌ IAMで明示的に権限を付与されたユーザーのみが利用可能

🌍 ユースケース例
金融企業のシステム部門が SOC 2 レポートを取引先へ提出

医療機関が HIPAA BAA を確認・同意して、PHIデータの取り扱い証明に使用

顧客から「御社はPCI DSS準拠ですか？」と聞かれ、Artifactからレポートを提出

システム導入前のベンダー評価としてISO 27001の証明を確認


----------------------------------------------------------------------------

[ AWS Artifact（マネジメントコンソール） ]
           │
 ┌────────────────────────┐
 │  ・SOC 1 / SOC 2 / SOC 3         │
 │  ・ISO 27001 / PCI DSS          │
 │  ・HIPAA BAA / GDPR DPA     │
 └────────────────────────┘
           │
     ダウンロード（PDF）
           │
 [ 法務 / 監査 / 顧客提出に活用 ]





/****************** 5-13-7 AWS Audit Manager ********************/


AWS Audit Manager 周辺の主要用語と解説
⚫️AWS Audit Manager
：AWSリソースや設定を自動で評価し、監査証跡を収集・整理して、各種コンプライアンス基準に対する監査レポートを作成できるサービス。
SOC、ISO、PCI DSS などの基準に対応したテンプレートが用意され、証拠の手動収集を削減できる。

📑 主な機能と目的
⚫️監査プロジェクト（Assessment）
：Audit Managerで作成する監査対象ごとの管理ユニット。各種コンプライアンス基準に基づいたコントロールセットと証拠収集対象を定義。

⚫️フレームワーク（Framework）
：監査の基準となる規格・業界標準テンプレート。例：

CIS AWS Foundations Benchmark

SOC 2 / ISO 27001 / PCI DSS

カスタムフレームワーク（独自の監査基準も定義可能）

⚫️コントロール（Control）
：各フレームワークにおけるチェック項目や要件の最小単位。CloudTrailやConfig、IAMなどの情報から自動収集が行われる。

🔍 監査証拠の自動収集
⚫️証拠（Evidence）
：AWSリソースの設定や操作ログから収集された実証データ。例：

IAMポリシー設定

S3バケットのパブリック設定有無

CloudTrailログの有効化状況

GuardDutyの有効性など

⚫️収集元のサービス例

サービス	説明
AWS Config	リソースの設定状態を履歴付きで取得可能
CloudTrail	API操作ログ（誰が、いつ、何をしたか）
IAM	ユーザー、ロール、ポリシーなどの設定状態
Security Hub	セキュリティ評価の集約結果
⚫️手動証拠のアップロード
：自動収集以外にも、PDF・CSV・テキストなどで手動証拠をアップロード可能。

⚙️ 管理・操作・共有
⚫️ダッシュボード
：プロジェクト進行状況や証拠収集の完了率、未対応コントロールの把握が可能。

⚫️レポート出力
：監査結果はPDF形式のレポートとして出力可能。内部監査・外部提出用に利用。

⚫️マルチアカウント対応（Organizations統合）
：複数AWSアカウントの監査結果を集中管理可能。組織単位でのコンプライアンス管理に有効。

⚫️アクセス制御（IAM）
：監査担当者・レビュー担当者など、ロールごとに必要な最小限の権限設定が可能。



----------------------------------------------------------------------------

✅ 試験・設計でのポイント
Audit Managerは“監査レポートを作成するための証拠収集・整理”が目的

既存のフレームワークテンプレートを使えば、即時監査プロジェクトを構築可能

CloudTrailやConfigなどからの証拠を自動収集できる

セキュリティ基準に準拠していることを示す「監査レポートの効率的な作成」が可能

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Audit Managerは設定を自動で修正してくれる	❌ 設定修正はせず、あくまで“証拠収集と監査支援”が目的
Audit Managerを使えばすべての証拠が自動収集される	❌ 一部は手動アップロードが必要（ドキュメント・運用手順など）
Audit Managerだけでセキュリティ管理できる	❌ Security HubやConfigなどと併用して初めて効果を発揮する

🌍 ユースケース例
PCI DSS監査に向けて、AWS環境の証拠を自動収集しつつ、PDFレポートとして外部提出

新しいSaaS製品のSOC 2取得に向けて、Audit Managerで準備段階から証拠を可視化

ISO 27001フレームワークでのチェックリストに沿って社内の対応状況を確認

複数アカウントの統制状況をAudit Managerから一元管理

----------------------------------------------------------------------------

[ AWS Audit Manager ]
       │
       ▼
[ 監査プロジェクト（SOC 2 など） ]
       │
 ┌──────┬───────┬────────┐
 │ CloudTrail │ IAM │ AWS Config │ ...他
 └──────┴───────┴────────┘
       │
[ 自動収集された証拠（Evidence） ]
       │
[ コントロールごとに整理／レポート化 ]
       │
[ PDF出力 → 内部監査／外部提出 ]




/****************** 5-13-8 AWS Firewall Manager ********************/

AWS Firewall Manager 周辺の主要用語と解説
⚫️AWS Firewall Manager
：複数のAWSアカウントやリージョンに対して、セキュリティルール（WAF・Shield・Network Firewallなど）を一括で適用・管理できるマネージドサービス。
Security Hub、Organizations、WAFなどと統合されており、ポリシーベースでのセキュリティ統制が可能。

🧩 主な機能と構成要素
⚫️ポリシー（Policy）
：Firewall Managerで定義するセキュリティルールの管理単位。1つのポリシーに対して、複数アカウント・複数リソースにルールを適用できる。

⚫️管理アカウント（Admin Account）
：AWS Organizations内でFirewall Managerを管理する中心アカウント。このアカウントから他アカウントへのルール展開を行う。

⚫️セキュリティサービスとの統合
Firewall Manager は以下のセキュリティサービスと連携可能：

統合サービス	説明
AWS WAF	Web ACLの一括適用（例：XSS/SQLi対策）
AWS Shield Advanced	DDoS保護の自動展開と一括管理
AWS Network Firewall	VPCレベルのファイアウォールを自動配備
Amazon VPC Security Group	セキュリティグループルールの標準化と異常検知
📋 ポリシーのタイプと使用例
ポリシー種別	用途例
WAFポリシー	すべてのCloudFrontディストリビューションにXSS対策ルールを適用
Shieldポリシー	全リージョンでShield Advancedを自動有効化
Network Firewallポリシー	指定VPCにファイアウォール＋ログ設定を自動展開
セキュリティグループ監視ポリシー	「すべてのポートが開放されている」などの危険設定を自動検知・修正提案
⚙️ 管理と運用
⚫️スコープ（Scope）
：ポリシーを適用する範囲（アカウント／OU／タグで絞り込み可能）。

⚫️強制適用（Enforce Mode）
：**ルールを自動的に適用・修正するか（Enforced） or モニタリングのみ（Audit Mode）**かを選択可能。

⚫️異常検知と修復（Compliance Status）
：対象リソースがポリシーに準拠しているかどうかを可視化。準拠していない場合はアラートまたは自動修復が可能。

⚫️Security Hub連携
：準拠状況をSecurity Hubに送信してセキュリティ状態を一元管理。


----------------------------------------------------------------------------
✅ 試験・設計でのポイント
Organizations配下の複数アカウントにWAFやFirewallルールを一括配布したいときに使用

自動的なルール配備 or モニタリングのみを選べる（Enforced / Audit）

Security Groupの設定異常（例：0.0.0.0/0が開いている）も検出できる

Security Hub、Shield Advanced、WAFなど複数サービスと組み合わせると真価を発揮する

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
Firewall Manager を使えば自動的に全リソースが保護される	❌ 適用範囲（OU／タグ／アカウント）を明示的に設定する必要がある
1つのリージョンだけにしか適用できない	❌ マルチリージョン対応可能（例：CloudFront WAFポリシーなど）
Security Groupのルールは対象外	❌ Security Groupの監査・修正も対象にできる（SGポリシー）

🌍 ユースケース例
複数AWSアカウントで一貫したWAF設定（SQLi/XSS対策）を自動配備

新規作成されたVPCにNetwork Firewallを自動で適用・監査ログも自動設定

セキュリティグループが「全開放（0.0.0.0/0:22）」になっていたら即アラート or 自動修復

DDoS攻撃時、全サービスにShield Advancedを一括適用＋コスト保護を有効化

----------------------------------------------------------------------------

[ AWS Organizations ]
       │
[ 管理アカウント（Firewall Manager） ]
       │
 ┌──────────────┬──────────────┐
 │ WAFポリシー         │ Network Firewallポリシー │
 │ Shieldポリシー     │ Security Groupポリシー  │
 └──────────────┴──────────────┘
       │
[ 各アカウント / リージョンの対象リソース ]





/****************** 5-13-9 AWS Amazon Macie ********************/


Amazon Macie 周辺の主要用語と解説
⚫️Amazon Macie
：AWSが提供するS3バケット内の機密情報（例：個人情報や認証情報）を自動で検出・分類・可視化するマネージドセキュリティサービス。
個人情報（PII）や機密データの漏洩リスクを早期に発見し、コンプライアンス対応を支援する。

🧩 主な機能と構成要素
⚫️スキャン（Job）
：Macieが実行するS3バケットに対するデータスキャンの単位。
1回限り or 定期スケジュールでの実行が可能。

⚫️分類（Classification）
：スキャンにより、ファイルごとに含まれる機密データの種類を特定（例：クレジットカード番号、メールアドレスなど）。

⚫️Finding（検出結果）
：スキャンやバケット設定分析の結果として出力されるイベント情報。Security Hubなどと連携して通知・対処可能。

⚫️Managed Data Identifier（MDI）
：Macieにあらかじめ組み込まれている機密情報の識別テンプレート。
（例：氏名、住所、電話番号、クレジットカード、パスポート番号など）

🔍 主な用途とスキャン対象
⚫️S3バケット設定のチェック
：S3バケットが公開されていないか、暗号化されているかなどのセキュリティ設定もチェックされる。

⚫️ファイルタイプ
：以下のような一般的なファイル形式に対応（2025年時点）：

プレーンテキスト（.txt, .csv, .log）

JSON, XML, HTML

Microsoft Office（.docx, .xlsx）

PDF、ZIP（部分的対応）

⚫️スキャン対象の条件
：最大サイズ・種類・プレフィックス指定など、細かいスキャン対象の調整が可能。

📊 結果の可視化と連携
⚫️Macieダッシュボード
：バケットごとのリスク評価、検出件数、スキャンステータスなどがグラフで可視化。

⚫️Amazon EventBridge 連携
：Findings をトリガーにしてSNS通知やLambdaによる自動修復処理が可能。

⚫️Security Hub 統合
：検出結果をSecurity Hubに集約して、他セキュリティイベントと統合管理できる。

⚫️S3 バケットレベルの可視化
：公開状態／暗号化／バージョニングなどの情報を一覧化して表示。


----------------------------------------------------------------------------

✅ 試験・設計でのポイント
Amazon Macieは「S3バケット内のデータに含まれる機密情報（PIIなど）の自動検出」が目的

構造化／非構造化データの分類が可能

Managed Data Identifier を活用して容易に設定可能

Security HubやEventBridgeと連携して、通知や対処が自動化できる

バケット自体のセキュリティ設定評価（公開設定や暗号化の有無）も自動的に実施される

🧠 よく出るひっかけ注意点
誤解しやすい点	正しい知識
MacieはS3外のリソースもスキャンできる	❌ MacieはS3専用のサービス（EC2やRDSなどは対象外）
Macieはファイルを変更・暗号化する	❌ Macieは読み取り専用スキャンで、ファイルそのものを変更しない
自動的に全バケットがスキャンされる	❌ スキャン対象バケットや条件はジョブで明示的に設定する必要がある

🌍 ユースケース例
個人情報（名前・住所・クレカ番号など）が含まれるS3ファイルの自動検出

公開設定されたS3バケットに誤って機密データが置かれていないか確認

定期スキャンによって内部監査やコンプライアンス要件に対応（例：GDPR、HIPAA）

機密情報を検出したら自動でSNS通知＋オブジェクトのS3移動や削除

----------------------------------------------------------------------------


[S3バケット]
     │
     ▼
[ Amazon Macie スキャンジョブ ]
     │
 ┌──────────────┐
 │  機密情報の検出・分類     │
 └──────────────┘
     │
     ▼
[ Findings ] → EventBridge/Security Hub
     │
[ 通知 / 自動対応 / レポート ]





/****************** 5-3 AWS  ********************/





----------------------------------------------------------------------------
----------------------------------------------------------------------------




